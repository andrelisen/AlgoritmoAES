// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/12/2019 16:34:15"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    AES_topo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module AES_topo_vlg_sample_tst(
	clock,
	e0,
	e1,
	e2,
	e3,
	e4,
	e5,
	e6,
	e7,
	e8,
	e9,
	e10,
	e11,
	e12,
	e13,
	e14,
	e15,
	En_inputs,
	En_regAddRound,
	sampler_tx
);
input  clock;
input [7:0] e0;
input [7:0] e1;
input [7:0] e2;
input [7:0] e3;
input [7:0] e4;
input [7:0] e5;
input [7:0] e6;
input [7:0] e7;
input [7:0] e8;
input [7:0] e9;
input [7:0] e10;
input [7:0] e11;
input [7:0] e12;
input [7:0] e13;
input [7:0] e14;
input [7:0] e15;
input  En_inputs;
input  En_regAddRound;
output sampler_tx;

reg sample;
time current_time;
always @(clock or e0 or e1 or e2 or e3 or e4 or e5 or e6 or e7 or e8 or e9 or e10 or e11 or e12 or e13 or e14 or e15 or En_inputs or En_regAddRound)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module AES_topo_vlg_check_tst (
	outAddRound_view,
	outReg0_view,
	outReg1_view,
	outRegAdd_view,
	s0,
	s1,
	s2,
	s3,
	s4,
	s5,
	s6,
	s7,
	s8,
	s9,
	s10,
	s11,
	s12,
	s13,
	s14,
	s15,
	sampler_rx
);
input [7:0] outAddRound_view;
input [7:0] outReg0_view;
input [7:0] outReg1_view;
input [7:0] outRegAdd_view;
input [7:0] s0;
input [7:0] s1;
input [7:0] s2;
input [7:0] s3;
input [7:0] s4;
input [7:0] s5;
input [7:0] s6;
input [7:0] s7;
input [7:0] s8;
input [7:0] s9;
input [7:0] s10;
input [7:0] s11;
input [7:0] s12;
input [7:0] s13;
input [7:0] s14;
input [7:0] s15;
input sampler_rx;

reg [7:0] outAddRound_view_expected;
reg [7:0] outReg0_view_expected;
reg [7:0] outReg1_view_expected;
reg [7:0] outRegAdd_view_expected;
reg [7:0] s0_expected;
reg [7:0] s1_expected;
reg [7:0] s2_expected;
reg [7:0] s3_expected;
reg [7:0] s4_expected;
reg [7:0] s5_expected;
reg [7:0] s6_expected;
reg [7:0] s7_expected;
reg [7:0] s8_expected;
reg [7:0] s9_expected;
reg [7:0] s10_expected;
reg [7:0] s11_expected;
reg [7:0] s12_expected;
reg [7:0] s13_expected;
reg [7:0] s14_expected;
reg [7:0] s15_expected;

reg [7:0] outAddRound_view_prev;
reg [7:0] outReg0_view_prev;
reg [7:0] outReg1_view_prev;
reg [7:0] outRegAdd_view_prev;
reg [7:0] s0_prev;
reg [7:0] s1_prev;
reg [7:0] s2_prev;
reg [7:0] s3_prev;
reg [7:0] s4_prev;
reg [7:0] s5_prev;
reg [7:0] s6_prev;
reg [7:0] s7_prev;
reg [7:0] s8_prev;
reg [7:0] s9_prev;
reg [7:0] s10_prev;
reg [7:0] s11_prev;
reg [7:0] s12_prev;
reg [7:0] s13_prev;
reg [7:0] s14_prev;
reg [7:0] s15_prev;

reg [7:0] outAddRound_view_expected_prev;
reg [7:0] outReg0_view_expected_prev;
reg [7:0] outReg1_view_expected_prev;
reg [7:0] outRegAdd_view_expected_prev;

reg [7:0] last_outAddRound_view_exp;
reg [7:0] last_outReg0_view_exp;
reg [7:0] last_outReg1_view_exp;
reg [7:0] last_outRegAdd_view_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:20] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 20'b1;
end

// update real /o prevs

always @(trigger)
begin
	outAddRound_view_prev = outAddRound_view;
	outReg0_view_prev = outReg0_view;
	outReg1_view_prev = outReg1_view;
	outRegAdd_view_prev = outRegAdd_view;
	s0_prev = s0;
	s1_prev = s1;
	s2_prev = s2;
	s3_prev = s3;
	s4_prev = s4;
	s5_prev = s5;
	s6_prev = s6;
	s7_prev = s7;
	s8_prev = s8;
	s9_prev = s9;
	s10_prev = s10;
	s11_prev = s11;
	s12_prev = s12;
	s13_prev = s13;
	s14_prev = s14;
	s15_prev = s15;
end

// update expected /o prevs

always @(trigger)
begin
	outAddRound_view_expected_prev = outAddRound_view_expected;
	outReg0_view_expected_prev = outReg0_view_expected;
	outReg1_view_expected_prev = outReg1_view_expected;
	outRegAdd_view_expected_prev = outRegAdd_view_expected;
end


// expected outReg0_view[ 7 ]
initial
begin
	outReg0_view_expected[7] = 1'bX;
end 
// expected outReg0_view[ 6 ]
initial
begin
	outReg0_view_expected[6] = 1'bX;
end 
// expected outReg0_view[ 5 ]
initial
begin
	outReg0_view_expected[5] = 1'bX;
end 
// expected outReg0_view[ 4 ]
initial
begin
	outReg0_view_expected[4] = 1'bX;
end 
// expected outReg0_view[ 3 ]
initial
begin
	outReg0_view_expected[3] = 1'bX;
end 
// expected outReg0_view[ 2 ]
initial
begin
	outReg0_view_expected[2] = 1'bX;
end 
// expected outReg0_view[ 1 ]
initial
begin
	outReg0_view_expected[1] = 1'bX;
end 
// expected outReg0_view[ 0 ]
initial
begin
	outReg0_view_expected[0] = 1'bX;
end 
// expected outReg1_view[ 7 ]
initial
begin
	outReg1_view_expected[7] = 1'bX;
end 
// expected outReg1_view[ 6 ]
initial
begin
	outReg1_view_expected[6] = 1'bX;
end 
// expected outReg1_view[ 5 ]
initial
begin
	outReg1_view_expected[5] = 1'bX;
end 
// expected outReg1_view[ 4 ]
initial
begin
	outReg1_view_expected[4] = 1'bX;
end 
// expected outReg1_view[ 3 ]
initial
begin
	outReg1_view_expected[3] = 1'bX;
end 
// expected outReg1_view[ 2 ]
initial
begin
	outReg1_view_expected[2] = 1'bX;
end 
// expected outReg1_view[ 1 ]
initial
begin
	outReg1_view_expected[1] = 1'bX;
end 
// expected outReg1_view[ 0 ]
initial
begin
	outReg1_view_expected[0] = 1'bX;
end 
// expected outRegAdd_view[ 7 ]
initial
begin
	outRegAdd_view_expected[7] = 1'bX;
end 
// expected outRegAdd_view[ 6 ]
initial
begin
	outRegAdd_view_expected[6] = 1'bX;
end 
// expected outRegAdd_view[ 5 ]
initial
begin
	outRegAdd_view_expected[5] = 1'bX;
end 
// expected outRegAdd_view[ 4 ]
initial
begin
	outRegAdd_view_expected[4] = 1'bX;
end 
// expected outRegAdd_view[ 3 ]
initial
begin
	outRegAdd_view_expected[3] = 1'bX;
end 
// expected outRegAdd_view[ 2 ]
initial
begin
	outRegAdd_view_expected[2] = 1'bX;
end 
// expected outRegAdd_view[ 1 ]
initial
begin
	outRegAdd_view_expected[1] = 1'bX;
end 
// expected outRegAdd_view[ 0 ]
initial
begin
	outRegAdd_view_expected[0] = 1'bX;
end 
// expected outAddRound_view[ 7 ]
initial
begin
	outAddRound_view_expected[7] = 1'bX;
end 
// expected outAddRound_view[ 6 ]
initial
begin
	outAddRound_view_expected[6] = 1'bX;
end 
// expected outAddRound_view[ 5 ]
initial
begin
	outAddRound_view_expected[5] = 1'bX;
end 
// expected outAddRound_view[ 4 ]
initial
begin
	outAddRound_view_expected[4] = 1'bX;
end 
// expected outAddRound_view[ 3 ]
initial
begin
	outAddRound_view_expected[3] = 1'bX;
end 
// expected outAddRound_view[ 2 ]
initial
begin
	outAddRound_view_expected[2] = 1'bX;
end 
// expected outAddRound_view[ 1 ]
initial
begin
	outAddRound_view_expected[1] = 1'bX;
end 
// expected outAddRound_view[ 0 ]
initial
begin
	outAddRound_view_expected[0] = 1'bX;
end 
// generate trigger
always @(outAddRound_view_expected or outAddRound_view or outReg0_view_expected or outReg0_view or outReg1_view_expected or outReg1_view or outRegAdd_view_expected or outRegAdd_view or s0_expected or s0 or s1_expected or s1 or s2_expected or s2 or s3_expected or s3 or s4_expected or s4 or s5_expected or s5 or s6_expected or s6 or s7_expected or s7 or s8_expected or s8 or s9_expected or s9 or s10_expected or s10 or s11_expected or s11 or s12_expected or s12 or s13_expected or s13 or s14_expected or s14 or s15_expected or s15)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected outAddRound_view = %b | expected outReg0_view = %b | expected outReg1_view = %b | expected outRegAdd_view = %b | expected s0 = %b | expected s1 = %b | expected s2 = %b | expected s3 = %b | expected s4 = %b | expected s5 = %b | expected s6 = %b | expected s7 = %b | expected s8 = %b | expected s9 = %b | expected s10 = %b | expected s11 = %b | expected s12 = %b | expected s13 = %b | expected s14 = %b | expected s15 = %b | ",outAddRound_view_expected_prev,outReg0_view_expected_prev,outReg1_view_expected_prev,outRegAdd_view_expected_prev,s0_expected_prev,s1_expected_prev,s2_expected_prev,s3_expected_prev,s4_expected_prev,s5_expected_prev,s6_expected_prev,s7_expected_prev,s8_expected_prev,s9_expected_prev,s10_expected_prev,s11_expected_prev,s12_expected_prev,s13_expected_prev,s14_expected_prev,s15_expected_prev);
	$display("| real outAddRound_view = %b | real outReg0_view = %b | real outReg1_view = %b | real outRegAdd_view = %b | real s0 = %b | real s1 = %b | real s2 = %b | real s3 = %b | real s4 = %b | real s5 = %b | real s6 = %b | real s7 = %b | real s8 = %b | real s9 = %b | real s10 = %b | real s11 = %b | real s12 = %b | real s13 = %b | real s14 = %b | real s15 = %b | ",outAddRound_view_prev,outReg0_view_prev,outReg1_view_prev,outRegAdd_view_prev,s0_prev,s1_prev,s2_prev,s3_prev,s4_prev,s5_prev,s6_prev,s7_prev,s8_prev,s9_prev,s10_prev,s11_prev,s12_prev,s13_prev,s14_prev,s15_prev);
`endif
	if (
		( outAddRound_view_expected_prev[0] !== 1'bx ) && ( outAddRound_view_prev[0] !== outAddRound_view_expected_prev[0] )
		&& ((outAddRound_view_expected_prev[0] !== last_outAddRound_view_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAddRound_view[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAddRound_view_expected_prev);
		$display ("     Real value = %b", outAddRound_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAddRound_view_exp[0] = outAddRound_view_expected_prev[0];
	end
	if (
		( outAddRound_view_expected_prev[1] !== 1'bx ) && ( outAddRound_view_prev[1] !== outAddRound_view_expected_prev[1] )
		&& ((outAddRound_view_expected_prev[1] !== last_outAddRound_view_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAddRound_view[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAddRound_view_expected_prev);
		$display ("     Real value = %b", outAddRound_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAddRound_view_exp[1] = outAddRound_view_expected_prev[1];
	end
	if (
		( outAddRound_view_expected_prev[2] !== 1'bx ) && ( outAddRound_view_prev[2] !== outAddRound_view_expected_prev[2] )
		&& ((outAddRound_view_expected_prev[2] !== last_outAddRound_view_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAddRound_view[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAddRound_view_expected_prev);
		$display ("     Real value = %b", outAddRound_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAddRound_view_exp[2] = outAddRound_view_expected_prev[2];
	end
	if (
		( outAddRound_view_expected_prev[3] !== 1'bx ) && ( outAddRound_view_prev[3] !== outAddRound_view_expected_prev[3] )
		&& ((outAddRound_view_expected_prev[3] !== last_outAddRound_view_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAddRound_view[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAddRound_view_expected_prev);
		$display ("     Real value = %b", outAddRound_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAddRound_view_exp[3] = outAddRound_view_expected_prev[3];
	end
	if (
		( outAddRound_view_expected_prev[4] !== 1'bx ) && ( outAddRound_view_prev[4] !== outAddRound_view_expected_prev[4] )
		&& ((outAddRound_view_expected_prev[4] !== last_outAddRound_view_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAddRound_view[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAddRound_view_expected_prev);
		$display ("     Real value = %b", outAddRound_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAddRound_view_exp[4] = outAddRound_view_expected_prev[4];
	end
	if (
		( outAddRound_view_expected_prev[5] !== 1'bx ) && ( outAddRound_view_prev[5] !== outAddRound_view_expected_prev[5] )
		&& ((outAddRound_view_expected_prev[5] !== last_outAddRound_view_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAddRound_view[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAddRound_view_expected_prev);
		$display ("     Real value = %b", outAddRound_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAddRound_view_exp[5] = outAddRound_view_expected_prev[5];
	end
	if (
		( outAddRound_view_expected_prev[6] !== 1'bx ) && ( outAddRound_view_prev[6] !== outAddRound_view_expected_prev[6] )
		&& ((outAddRound_view_expected_prev[6] !== last_outAddRound_view_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAddRound_view[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAddRound_view_expected_prev);
		$display ("     Real value = %b", outAddRound_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAddRound_view_exp[6] = outAddRound_view_expected_prev[6];
	end
	if (
		( outAddRound_view_expected_prev[7] !== 1'bx ) && ( outAddRound_view_prev[7] !== outAddRound_view_expected_prev[7] )
		&& ((outAddRound_view_expected_prev[7] !== last_outAddRound_view_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAddRound_view[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAddRound_view_expected_prev);
		$display ("     Real value = %b", outAddRound_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAddRound_view_exp[7] = outAddRound_view_expected_prev[7];
	end
	if (
		( outReg0_view_expected_prev[0] !== 1'bx ) && ( outReg0_view_prev[0] !== outReg0_view_expected_prev[0] )
		&& ((outReg0_view_expected_prev[0] !== last_outReg0_view_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outReg0_view[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outReg0_view_expected_prev);
		$display ("     Real value = %b", outReg0_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outReg0_view_exp[0] = outReg0_view_expected_prev[0];
	end
	if (
		( outReg0_view_expected_prev[1] !== 1'bx ) && ( outReg0_view_prev[1] !== outReg0_view_expected_prev[1] )
		&& ((outReg0_view_expected_prev[1] !== last_outReg0_view_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outReg0_view[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outReg0_view_expected_prev);
		$display ("     Real value = %b", outReg0_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outReg0_view_exp[1] = outReg0_view_expected_prev[1];
	end
	if (
		( outReg0_view_expected_prev[2] !== 1'bx ) && ( outReg0_view_prev[2] !== outReg0_view_expected_prev[2] )
		&& ((outReg0_view_expected_prev[2] !== last_outReg0_view_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outReg0_view[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outReg0_view_expected_prev);
		$display ("     Real value = %b", outReg0_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outReg0_view_exp[2] = outReg0_view_expected_prev[2];
	end
	if (
		( outReg0_view_expected_prev[3] !== 1'bx ) && ( outReg0_view_prev[3] !== outReg0_view_expected_prev[3] )
		&& ((outReg0_view_expected_prev[3] !== last_outReg0_view_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outReg0_view[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outReg0_view_expected_prev);
		$display ("     Real value = %b", outReg0_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outReg0_view_exp[3] = outReg0_view_expected_prev[3];
	end
	if (
		( outReg0_view_expected_prev[4] !== 1'bx ) && ( outReg0_view_prev[4] !== outReg0_view_expected_prev[4] )
		&& ((outReg0_view_expected_prev[4] !== last_outReg0_view_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outReg0_view[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outReg0_view_expected_prev);
		$display ("     Real value = %b", outReg0_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outReg0_view_exp[4] = outReg0_view_expected_prev[4];
	end
	if (
		( outReg0_view_expected_prev[5] !== 1'bx ) && ( outReg0_view_prev[5] !== outReg0_view_expected_prev[5] )
		&& ((outReg0_view_expected_prev[5] !== last_outReg0_view_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outReg0_view[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outReg0_view_expected_prev);
		$display ("     Real value = %b", outReg0_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outReg0_view_exp[5] = outReg0_view_expected_prev[5];
	end
	if (
		( outReg0_view_expected_prev[6] !== 1'bx ) && ( outReg0_view_prev[6] !== outReg0_view_expected_prev[6] )
		&& ((outReg0_view_expected_prev[6] !== last_outReg0_view_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outReg0_view[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outReg0_view_expected_prev);
		$display ("     Real value = %b", outReg0_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outReg0_view_exp[6] = outReg0_view_expected_prev[6];
	end
	if (
		( outReg0_view_expected_prev[7] !== 1'bx ) && ( outReg0_view_prev[7] !== outReg0_view_expected_prev[7] )
		&& ((outReg0_view_expected_prev[7] !== last_outReg0_view_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outReg0_view[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outReg0_view_expected_prev);
		$display ("     Real value = %b", outReg0_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outReg0_view_exp[7] = outReg0_view_expected_prev[7];
	end
	if (
		( outReg1_view_expected_prev[0] !== 1'bx ) && ( outReg1_view_prev[0] !== outReg1_view_expected_prev[0] )
		&& ((outReg1_view_expected_prev[0] !== last_outReg1_view_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outReg1_view[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outReg1_view_expected_prev);
		$display ("     Real value = %b", outReg1_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outReg1_view_exp[0] = outReg1_view_expected_prev[0];
	end
	if (
		( outReg1_view_expected_prev[1] !== 1'bx ) && ( outReg1_view_prev[1] !== outReg1_view_expected_prev[1] )
		&& ((outReg1_view_expected_prev[1] !== last_outReg1_view_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outReg1_view[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outReg1_view_expected_prev);
		$display ("     Real value = %b", outReg1_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outReg1_view_exp[1] = outReg1_view_expected_prev[1];
	end
	if (
		( outReg1_view_expected_prev[2] !== 1'bx ) && ( outReg1_view_prev[2] !== outReg1_view_expected_prev[2] )
		&& ((outReg1_view_expected_prev[2] !== last_outReg1_view_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outReg1_view[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outReg1_view_expected_prev);
		$display ("     Real value = %b", outReg1_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outReg1_view_exp[2] = outReg1_view_expected_prev[2];
	end
	if (
		( outReg1_view_expected_prev[3] !== 1'bx ) && ( outReg1_view_prev[3] !== outReg1_view_expected_prev[3] )
		&& ((outReg1_view_expected_prev[3] !== last_outReg1_view_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outReg1_view[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outReg1_view_expected_prev);
		$display ("     Real value = %b", outReg1_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outReg1_view_exp[3] = outReg1_view_expected_prev[3];
	end
	if (
		( outReg1_view_expected_prev[4] !== 1'bx ) && ( outReg1_view_prev[4] !== outReg1_view_expected_prev[4] )
		&& ((outReg1_view_expected_prev[4] !== last_outReg1_view_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outReg1_view[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outReg1_view_expected_prev);
		$display ("     Real value = %b", outReg1_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outReg1_view_exp[4] = outReg1_view_expected_prev[4];
	end
	if (
		( outReg1_view_expected_prev[5] !== 1'bx ) && ( outReg1_view_prev[5] !== outReg1_view_expected_prev[5] )
		&& ((outReg1_view_expected_prev[5] !== last_outReg1_view_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outReg1_view[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outReg1_view_expected_prev);
		$display ("     Real value = %b", outReg1_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outReg1_view_exp[5] = outReg1_view_expected_prev[5];
	end
	if (
		( outReg1_view_expected_prev[6] !== 1'bx ) && ( outReg1_view_prev[6] !== outReg1_view_expected_prev[6] )
		&& ((outReg1_view_expected_prev[6] !== last_outReg1_view_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outReg1_view[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outReg1_view_expected_prev);
		$display ("     Real value = %b", outReg1_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outReg1_view_exp[6] = outReg1_view_expected_prev[6];
	end
	if (
		( outReg1_view_expected_prev[7] !== 1'bx ) && ( outReg1_view_prev[7] !== outReg1_view_expected_prev[7] )
		&& ((outReg1_view_expected_prev[7] !== last_outReg1_view_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outReg1_view[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outReg1_view_expected_prev);
		$display ("     Real value = %b", outReg1_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outReg1_view_exp[7] = outReg1_view_expected_prev[7];
	end
	if (
		( outRegAdd_view_expected_prev[0] !== 1'bx ) && ( outRegAdd_view_prev[0] !== outRegAdd_view_expected_prev[0] )
		&& ((outRegAdd_view_expected_prev[0] !== last_outRegAdd_view_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegAdd_view[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegAdd_view_expected_prev);
		$display ("     Real value = %b", outRegAdd_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outRegAdd_view_exp[0] = outRegAdd_view_expected_prev[0];
	end
	if (
		( outRegAdd_view_expected_prev[1] !== 1'bx ) && ( outRegAdd_view_prev[1] !== outRegAdd_view_expected_prev[1] )
		&& ((outRegAdd_view_expected_prev[1] !== last_outRegAdd_view_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegAdd_view[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegAdd_view_expected_prev);
		$display ("     Real value = %b", outRegAdd_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outRegAdd_view_exp[1] = outRegAdd_view_expected_prev[1];
	end
	if (
		( outRegAdd_view_expected_prev[2] !== 1'bx ) && ( outRegAdd_view_prev[2] !== outRegAdd_view_expected_prev[2] )
		&& ((outRegAdd_view_expected_prev[2] !== last_outRegAdd_view_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegAdd_view[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegAdd_view_expected_prev);
		$display ("     Real value = %b", outRegAdd_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outRegAdd_view_exp[2] = outRegAdd_view_expected_prev[2];
	end
	if (
		( outRegAdd_view_expected_prev[3] !== 1'bx ) && ( outRegAdd_view_prev[3] !== outRegAdd_view_expected_prev[3] )
		&& ((outRegAdd_view_expected_prev[3] !== last_outRegAdd_view_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegAdd_view[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegAdd_view_expected_prev);
		$display ("     Real value = %b", outRegAdd_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outRegAdd_view_exp[3] = outRegAdd_view_expected_prev[3];
	end
	if (
		( outRegAdd_view_expected_prev[4] !== 1'bx ) && ( outRegAdd_view_prev[4] !== outRegAdd_view_expected_prev[4] )
		&& ((outRegAdd_view_expected_prev[4] !== last_outRegAdd_view_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegAdd_view[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegAdd_view_expected_prev);
		$display ("     Real value = %b", outRegAdd_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outRegAdd_view_exp[4] = outRegAdd_view_expected_prev[4];
	end
	if (
		( outRegAdd_view_expected_prev[5] !== 1'bx ) && ( outRegAdd_view_prev[5] !== outRegAdd_view_expected_prev[5] )
		&& ((outRegAdd_view_expected_prev[5] !== last_outRegAdd_view_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegAdd_view[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegAdd_view_expected_prev);
		$display ("     Real value = %b", outRegAdd_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outRegAdd_view_exp[5] = outRegAdd_view_expected_prev[5];
	end
	if (
		( outRegAdd_view_expected_prev[6] !== 1'bx ) && ( outRegAdd_view_prev[6] !== outRegAdd_view_expected_prev[6] )
		&& ((outRegAdd_view_expected_prev[6] !== last_outRegAdd_view_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegAdd_view[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegAdd_view_expected_prev);
		$display ("     Real value = %b", outRegAdd_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outRegAdd_view_exp[6] = outRegAdd_view_expected_prev[6];
	end
	if (
		( outRegAdd_view_expected_prev[7] !== 1'bx ) && ( outRegAdd_view_prev[7] !== outRegAdd_view_expected_prev[7] )
		&& ((outRegAdd_view_expected_prev[7] !== last_outRegAdd_view_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegAdd_view[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegAdd_view_expected_prev);
		$display ("     Real value = %b", outRegAdd_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outRegAdd_view_exp[7] = outRegAdd_view_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module AES_topo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [7:0] e0;
reg [7:0] e1;
reg [7:0] e2;
reg [7:0] e3;
reg [7:0] e4;
reg [7:0] e5;
reg [7:0] e6;
reg [7:0] e7;
reg [7:0] e8;
reg [7:0] e9;
reg [7:0] e10;
reg [7:0] e11;
reg [7:0] e12;
reg [7:0] e13;
reg [7:0] e14;
reg [7:0] e15;
reg En_inputs;
reg En_regAddRound;
// wires                                               
wire [7:0] outAddRound_view;
wire [7:0] outReg0_view;
wire [7:0] outReg1_view;
wire [7:0] outRegAdd_view;
wire [7:0] s0;
wire [7:0] s1;
wire [7:0] s2;
wire [7:0] s3;
wire [7:0] s4;
wire [7:0] s5;
wire [7:0] s6;
wire [7:0] s7;
wire [7:0] s8;
wire [7:0] s9;
wire [7:0] s10;
wire [7:0] s11;
wire [7:0] s12;
wire [7:0] s13;
wire [7:0] s14;
wire [7:0] s15;

wire sampler;                             

// assign statements (if any)                          
AES_topo i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.e0(e0),
	.e1(e1),
	.e2(e2),
	.e3(e3),
	.e4(e4),
	.e5(e5),
	.e6(e6),
	.e7(e7),
	.e8(e8),
	.e9(e9),
	.e10(e10),
	.e11(e11),
	.e12(e12),
	.e13(e13),
	.e14(e14),
	.e15(e15),
	.En_inputs(En_inputs),
	.En_regAddRound(En_regAddRound),
	.outAddRound_view(outAddRound_view),
	.outReg0_view(outReg0_view),
	.outReg1_view(outReg1_view),
	.outRegAdd_view(outRegAdd_view),
	.s0(s0),
	.s1(s1),
	.s2(s2),
	.s3(s3),
	.s4(s4),
	.s5(s5),
	.s6(s6),
	.s7(s7),
	.s8(s8),
	.s9(s9),
	.s10(s10),
	.s11(s11),
	.s12(s12),
	.s13(s13),
	.s14(s14),
	.s15(s15)
);
// e0[ 7 ]
initial
begin
	e0[7] = 1'b0;
end 
// e0[ 6 ]
initial
begin
	e0[6] = 1'b0;
end 
// e0[ 5 ]
initial
begin
	e0[5] = 1'b0;
end 
// e0[ 4 ]
initial
begin
	e0[4] = 1'b0;
end 
// e0[ 3 ]
initial
begin
	e0[3] = 1'b0;
end 
// e0[ 2 ]
initial
begin
	e0[2] = 1'b0;
end 
// e0[ 1 ]
initial
begin
	e0[1] = 1'b0;
end 
// e0[ 0 ]
initial
begin
	e0[0] = 1'b1;
end 
// e1[ 7 ]
initial
begin
	e1[7] = 1'b0;
end 
// e1[ 6 ]
initial
begin
	e1[6] = 1'b0;
end 
// e1[ 5 ]
initial
begin
	e1[5] = 1'b0;
end 
// e1[ 4 ]
initial
begin
	e1[4] = 1'b0;
end 
// e1[ 3 ]
initial
begin
	e1[3] = 1'b0;
end 
// e1[ 2 ]
initial
begin
	e1[2] = 1'b0;
end 
// e1[ 1 ]
initial
begin
	e1[1] = 1'b1;
end 
// e1[ 0 ]
initial
begin
	e1[0] = 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #25000 1'b1;
	#25000;
end 

// En_inputs
initial
begin
	En_inputs = 1'b0;
	En_inputs = #40000 1'b1;
	En_inputs = #50000 1'b0;
end 

// En_regAddRound
initial
begin
	En_regAddRound = 1'bX;
	En_regAddRound = #90000 1'b1;
end 

AES_topo_vlg_sample_tst tb_sample (
	.clock(clock),
	.e0(e0),
	.e1(e1),
	.e2(e2),
	.e3(e3),
	.e4(e4),
	.e5(e5),
	.e6(e6),
	.e7(e7),
	.e8(e8),
	.e9(e9),
	.e10(e10),
	.e11(e11),
	.e12(e12),
	.e13(e13),
	.e14(e14),
	.e15(e15),
	.En_inputs(En_inputs),
	.En_regAddRound(En_regAddRound),
	.sampler_tx(sampler)
);

AES_topo_vlg_check_tst tb_out(
	.outAddRound_view(outAddRound_view),
	.outReg0_view(outReg0_view),
	.outReg1_view(outReg1_view),
	.outRegAdd_view(outRegAdd_view),
	.s0(s0),
	.s1(s1),
	.s2(s2),
	.s3(s3),
	.s4(s4),
	.s5(s5),
	.s6(s6),
	.s7(s7),
	.s8(s8),
	.s9(s9),
	.s10(s10),
	.s11(s11),
	.s12(s12),
	.s13(s13),
	.s14(s14),
	.s15(s15),
	.sampler_rx(sampler)
);
endmodule

