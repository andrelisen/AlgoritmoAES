// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/30/2019 21:26:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Conecta_topo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Conecta_topo_vlg_sample_tst(
	clk,
	entrada0_top,
	entrada1_top,
	entrada2_top,
	entrada3_top,
	entrada4_top,
	entrada5_top,
	entrada6_top,
	entrada7_top,
	rst,
	sampler_tx
);
input  clk;
input [7:0] entrada0_top;
input [7:0] entrada1_top;
input [7:0] entrada2_top;
input [7:0] entrada3_top;
input [7:0] entrada4_top;
input [7:0] entrada5_top;
input [7:0] entrada6_top;
input [7:0] entrada7_top;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk or entrada0_top or entrada1_top or entrada2_top or entrada3_top or entrada4_top or entrada5_top or entrada6_top or entrada7_top or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Conecta_topo_vlg_check_tst (
	out0Add_top,
	out1Add_top,
	out2Add_top,
	out3Add_top,
	out4Add_top,
	out5Add_top,
	out6Add_top,
	out7Add_top,
	out8Add_top,
	out9Add_top,
	out10Add_top,
	out11Add_top,
	out12Add_top,
	out13Add_top,
	out14Add_top,
	out15Add_top,
	sampler_rx
);
input [7:0] out0Add_top;
input [7:0] out1Add_top;
input [7:0] out2Add_top;
input [7:0] out3Add_top;
input [7:0] out4Add_top;
input [7:0] out5Add_top;
input [7:0] out6Add_top;
input [7:0] out7Add_top;
input [7:0] out8Add_top;
input [7:0] out9Add_top;
input [7:0] out10Add_top;
input [7:0] out11Add_top;
input [7:0] out12Add_top;
input [7:0] out13Add_top;
input [7:0] out14Add_top;
input [7:0] out15Add_top;
input sampler_rx;

reg [7:0] out0Add_top_expected;
reg [7:0] out1Add_top_expected;
reg [7:0] out2Add_top_expected;
reg [7:0] out3Add_top_expected;
reg [7:0] out4Add_top_expected;
reg [7:0] out5Add_top_expected;
reg [7:0] out6Add_top_expected;
reg [7:0] out7Add_top_expected;
reg [7:0] out8Add_top_expected;
reg [7:0] out9Add_top_expected;
reg [7:0] out10Add_top_expected;
reg [7:0] out11Add_top_expected;
reg [7:0] out12Add_top_expected;
reg [7:0] out13Add_top_expected;
reg [7:0] out14Add_top_expected;
reg [7:0] out15Add_top_expected;

reg [7:0] out0Add_top_prev;
reg [7:0] out1Add_top_prev;
reg [7:0] out2Add_top_prev;
reg [7:0] out3Add_top_prev;
reg [7:0] out4Add_top_prev;
reg [7:0] out5Add_top_prev;
reg [7:0] out6Add_top_prev;
reg [7:0] out7Add_top_prev;
reg [7:0] out8Add_top_prev;
reg [7:0] out9Add_top_prev;
reg [7:0] out10Add_top_prev;
reg [7:0] out11Add_top_prev;
reg [7:0] out12Add_top_prev;
reg [7:0] out13Add_top_prev;
reg [7:0] out14Add_top_prev;
reg [7:0] out15Add_top_prev;

reg [7:0] out0Add_top_expected_prev;
reg [7:0] out1Add_top_expected_prev;
reg [7:0] out2Add_top_expected_prev;
reg [7:0] out3Add_top_expected_prev;
reg [7:0] out4Add_top_expected_prev;
reg [7:0] out5Add_top_expected_prev;
reg [7:0] out6Add_top_expected_prev;
reg [7:0] out7Add_top_expected_prev;
reg [7:0] out8Add_top_expected_prev;
reg [7:0] out9Add_top_expected_prev;
reg [7:0] out10Add_top_expected_prev;
reg [7:0] out11Add_top_expected_prev;
reg [7:0] out12Add_top_expected_prev;
reg [7:0] out13Add_top_expected_prev;
reg [7:0] out14Add_top_expected_prev;
reg [7:0] out15Add_top_expected_prev;

reg [7:0] last_out0Add_top_exp;
reg [7:0] last_out1Add_top_exp;
reg [7:0] last_out2Add_top_exp;
reg [7:0] last_out3Add_top_exp;
reg [7:0] last_out4Add_top_exp;
reg [7:0] last_out5Add_top_exp;
reg [7:0] last_out6Add_top_exp;
reg [7:0] last_out7Add_top_exp;
reg [7:0] last_out8Add_top_exp;
reg [7:0] last_out9Add_top_exp;
reg [7:0] last_out10Add_top_exp;
reg [7:0] last_out11Add_top_exp;
reg [7:0] last_out12Add_top_exp;
reg [7:0] last_out13Add_top_exp;
reg [7:0] last_out14Add_top_exp;
reg [7:0] last_out15Add_top_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	out0Add_top_prev = out0Add_top;
	out1Add_top_prev = out1Add_top;
	out2Add_top_prev = out2Add_top;
	out3Add_top_prev = out3Add_top;
	out4Add_top_prev = out4Add_top;
	out5Add_top_prev = out5Add_top;
	out6Add_top_prev = out6Add_top;
	out7Add_top_prev = out7Add_top;
	out8Add_top_prev = out8Add_top;
	out9Add_top_prev = out9Add_top;
	out10Add_top_prev = out10Add_top;
	out11Add_top_prev = out11Add_top;
	out12Add_top_prev = out12Add_top;
	out13Add_top_prev = out13Add_top;
	out14Add_top_prev = out14Add_top;
	out15Add_top_prev = out15Add_top;
end

// update expected /o prevs

always @(trigger)
begin
	out0Add_top_expected_prev = out0Add_top_expected;
	out1Add_top_expected_prev = out1Add_top_expected;
	out2Add_top_expected_prev = out2Add_top_expected;
	out3Add_top_expected_prev = out3Add_top_expected;
	out4Add_top_expected_prev = out4Add_top_expected;
	out5Add_top_expected_prev = out5Add_top_expected;
	out6Add_top_expected_prev = out6Add_top_expected;
	out7Add_top_expected_prev = out7Add_top_expected;
	out8Add_top_expected_prev = out8Add_top_expected;
	out9Add_top_expected_prev = out9Add_top_expected;
	out10Add_top_expected_prev = out10Add_top_expected;
	out11Add_top_expected_prev = out11Add_top_expected;
	out12Add_top_expected_prev = out12Add_top_expected;
	out13Add_top_expected_prev = out13Add_top_expected;
	out14Add_top_expected_prev = out14Add_top_expected;
	out15Add_top_expected_prev = out15Add_top_expected;
end


// expected out0Add_top[ 7 ]
initial
begin
	out0Add_top_expected[7] = 1'bX;
end 
// expected out0Add_top[ 6 ]
initial
begin
	out0Add_top_expected[6] = 1'bX;
end 
// expected out0Add_top[ 5 ]
initial
begin
	out0Add_top_expected[5] = 1'bX;
end 
// expected out0Add_top[ 4 ]
initial
begin
	out0Add_top_expected[4] = 1'bX;
end 
// expected out0Add_top[ 3 ]
initial
begin
	out0Add_top_expected[3] = 1'bX;
end 
// expected out0Add_top[ 2 ]
initial
begin
	out0Add_top_expected[2] = 1'bX;
end 
// expected out0Add_top[ 1 ]
initial
begin
	out0Add_top_expected[1] = 1'bX;
end 
// expected out0Add_top[ 0 ]
initial
begin
	out0Add_top_expected[0] = 1'bX;
end 
// expected out1Add_top[ 7 ]
initial
begin
	out1Add_top_expected[7] = 1'bX;
end 
// expected out1Add_top[ 6 ]
initial
begin
	out1Add_top_expected[6] = 1'bX;
end 
// expected out1Add_top[ 5 ]
initial
begin
	out1Add_top_expected[5] = 1'bX;
end 
// expected out1Add_top[ 4 ]
initial
begin
	out1Add_top_expected[4] = 1'bX;
end 
// expected out1Add_top[ 3 ]
initial
begin
	out1Add_top_expected[3] = 1'bX;
end 
// expected out1Add_top[ 2 ]
initial
begin
	out1Add_top_expected[2] = 1'bX;
end 
// expected out1Add_top[ 1 ]
initial
begin
	out1Add_top_expected[1] = 1'bX;
end 
// expected out1Add_top[ 0 ]
initial
begin
	out1Add_top_expected[0] = 1'bX;
end 
// expected out2Add_top[ 7 ]
initial
begin
	out2Add_top_expected[7] = 1'bX;
end 
// expected out2Add_top[ 6 ]
initial
begin
	out2Add_top_expected[6] = 1'bX;
end 
// expected out2Add_top[ 5 ]
initial
begin
	out2Add_top_expected[5] = 1'bX;
end 
// expected out2Add_top[ 4 ]
initial
begin
	out2Add_top_expected[4] = 1'bX;
end 
// expected out2Add_top[ 3 ]
initial
begin
	out2Add_top_expected[3] = 1'bX;
end 
// expected out2Add_top[ 2 ]
initial
begin
	out2Add_top_expected[2] = 1'bX;
end 
// expected out2Add_top[ 1 ]
initial
begin
	out2Add_top_expected[1] = 1'bX;
end 
// expected out2Add_top[ 0 ]
initial
begin
	out2Add_top_expected[0] = 1'bX;
end 
// expected out3Add_top[ 7 ]
initial
begin
	out3Add_top_expected[7] = 1'bX;
end 
// expected out3Add_top[ 6 ]
initial
begin
	out3Add_top_expected[6] = 1'bX;
end 
// expected out3Add_top[ 5 ]
initial
begin
	out3Add_top_expected[5] = 1'bX;
end 
// expected out3Add_top[ 4 ]
initial
begin
	out3Add_top_expected[4] = 1'bX;
end 
// expected out3Add_top[ 3 ]
initial
begin
	out3Add_top_expected[3] = 1'bX;
end 
// expected out3Add_top[ 2 ]
initial
begin
	out3Add_top_expected[2] = 1'bX;
end 
// expected out3Add_top[ 1 ]
initial
begin
	out3Add_top_expected[1] = 1'bX;
end 
// expected out3Add_top[ 0 ]
initial
begin
	out3Add_top_expected[0] = 1'bX;
end 
// expected out4Add_top[ 7 ]
initial
begin
	out4Add_top_expected[7] = 1'bX;
end 
// expected out4Add_top[ 6 ]
initial
begin
	out4Add_top_expected[6] = 1'bX;
end 
// expected out4Add_top[ 5 ]
initial
begin
	out4Add_top_expected[5] = 1'bX;
end 
// expected out4Add_top[ 4 ]
initial
begin
	out4Add_top_expected[4] = 1'bX;
end 
// expected out4Add_top[ 3 ]
initial
begin
	out4Add_top_expected[3] = 1'bX;
end 
// expected out4Add_top[ 2 ]
initial
begin
	out4Add_top_expected[2] = 1'bX;
end 
// expected out4Add_top[ 1 ]
initial
begin
	out4Add_top_expected[1] = 1'bX;
end 
// expected out4Add_top[ 0 ]
initial
begin
	out4Add_top_expected[0] = 1'bX;
end 
// expected out5Add_top[ 7 ]
initial
begin
	out5Add_top_expected[7] = 1'bX;
end 
// expected out5Add_top[ 6 ]
initial
begin
	out5Add_top_expected[6] = 1'bX;
end 
// expected out5Add_top[ 5 ]
initial
begin
	out5Add_top_expected[5] = 1'bX;
end 
// expected out5Add_top[ 4 ]
initial
begin
	out5Add_top_expected[4] = 1'bX;
end 
// expected out5Add_top[ 3 ]
initial
begin
	out5Add_top_expected[3] = 1'bX;
end 
// expected out5Add_top[ 2 ]
initial
begin
	out5Add_top_expected[2] = 1'bX;
end 
// expected out5Add_top[ 1 ]
initial
begin
	out5Add_top_expected[1] = 1'bX;
end 
// expected out5Add_top[ 0 ]
initial
begin
	out5Add_top_expected[0] = 1'bX;
end 
// expected out6Add_top[ 7 ]
initial
begin
	out6Add_top_expected[7] = 1'bX;
end 
// expected out6Add_top[ 6 ]
initial
begin
	out6Add_top_expected[6] = 1'bX;
end 
// expected out6Add_top[ 5 ]
initial
begin
	out6Add_top_expected[5] = 1'bX;
end 
// expected out6Add_top[ 4 ]
initial
begin
	out6Add_top_expected[4] = 1'bX;
end 
// expected out6Add_top[ 3 ]
initial
begin
	out6Add_top_expected[3] = 1'bX;
end 
// expected out6Add_top[ 2 ]
initial
begin
	out6Add_top_expected[2] = 1'bX;
end 
// expected out6Add_top[ 1 ]
initial
begin
	out6Add_top_expected[1] = 1'bX;
end 
// expected out6Add_top[ 0 ]
initial
begin
	out6Add_top_expected[0] = 1'bX;
end 
// expected out7Add_top[ 7 ]
initial
begin
	out7Add_top_expected[7] = 1'bX;
end 
// expected out7Add_top[ 6 ]
initial
begin
	out7Add_top_expected[6] = 1'bX;
end 
// expected out7Add_top[ 5 ]
initial
begin
	out7Add_top_expected[5] = 1'bX;
end 
// expected out7Add_top[ 4 ]
initial
begin
	out7Add_top_expected[4] = 1'bX;
end 
// expected out7Add_top[ 3 ]
initial
begin
	out7Add_top_expected[3] = 1'bX;
end 
// expected out7Add_top[ 2 ]
initial
begin
	out7Add_top_expected[2] = 1'bX;
end 
// expected out7Add_top[ 1 ]
initial
begin
	out7Add_top_expected[1] = 1'bX;
end 
// expected out7Add_top[ 0 ]
initial
begin
	out7Add_top_expected[0] = 1'bX;
end 
// expected out8Add_top[ 7 ]
initial
begin
	out8Add_top_expected[7] = 1'bX;
end 
// expected out8Add_top[ 6 ]
initial
begin
	out8Add_top_expected[6] = 1'bX;
end 
// expected out8Add_top[ 5 ]
initial
begin
	out8Add_top_expected[5] = 1'bX;
end 
// expected out8Add_top[ 4 ]
initial
begin
	out8Add_top_expected[4] = 1'bX;
end 
// expected out8Add_top[ 3 ]
initial
begin
	out8Add_top_expected[3] = 1'bX;
end 
// expected out8Add_top[ 2 ]
initial
begin
	out8Add_top_expected[2] = 1'bX;
end 
// expected out8Add_top[ 1 ]
initial
begin
	out8Add_top_expected[1] = 1'bX;
end 
// expected out8Add_top[ 0 ]
initial
begin
	out8Add_top_expected[0] = 1'bX;
end 
// expected out9Add_top[ 7 ]
initial
begin
	out9Add_top_expected[7] = 1'bX;
end 
// expected out9Add_top[ 6 ]
initial
begin
	out9Add_top_expected[6] = 1'bX;
end 
// expected out9Add_top[ 5 ]
initial
begin
	out9Add_top_expected[5] = 1'bX;
end 
// expected out9Add_top[ 4 ]
initial
begin
	out9Add_top_expected[4] = 1'bX;
end 
// expected out9Add_top[ 3 ]
initial
begin
	out9Add_top_expected[3] = 1'bX;
end 
// expected out9Add_top[ 2 ]
initial
begin
	out9Add_top_expected[2] = 1'bX;
end 
// expected out9Add_top[ 1 ]
initial
begin
	out9Add_top_expected[1] = 1'bX;
end 
// expected out9Add_top[ 0 ]
initial
begin
	out9Add_top_expected[0] = 1'bX;
end 
// expected out10Add_top[ 7 ]
initial
begin
	out10Add_top_expected[7] = 1'bX;
end 
// expected out10Add_top[ 6 ]
initial
begin
	out10Add_top_expected[6] = 1'bX;
end 
// expected out10Add_top[ 5 ]
initial
begin
	out10Add_top_expected[5] = 1'bX;
end 
// expected out10Add_top[ 4 ]
initial
begin
	out10Add_top_expected[4] = 1'bX;
end 
// expected out10Add_top[ 3 ]
initial
begin
	out10Add_top_expected[3] = 1'bX;
end 
// expected out10Add_top[ 2 ]
initial
begin
	out10Add_top_expected[2] = 1'bX;
end 
// expected out10Add_top[ 1 ]
initial
begin
	out10Add_top_expected[1] = 1'bX;
end 
// expected out10Add_top[ 0 ]
initial
begin
	out10Add_top_expected[0] = 1'bX;
end 
// expected out11Add_top[ 7 ]
initial
begin
	out11Add_top_expected[7] = 1'bX;
end 
// expected out11Add_top[ 6 ]
initial
begin
	out11Add_top_expected[6] = 1'bX;
end 
// expected out11Add_top[ 5 ]
initial
begin
	out11Add_top_expected[5] = 1'bX;
end 
// expected out11Add_top[ 4 ]
initial
begin
	out11Add_top_expected[4] = 1'bX;
end 
// expected out11Add_top[ 3 ]
initial
begin
	out11Add_top_expected[3] = 1'bX;
end 
// expected out11Add_top[ 2 ]
initial
begin
	out11Add_top_expected[2] = 1'bX;
end 
// expected out11Add_top[ 1 ]
initial
begin
	out11Add_top_expected[1] = 1'bX;
end 
// expected out11Add_top[ 0 ]
initial
begin
	out11Add_top_expected[0] = 1'bX;
end 
// expected out12Add_top[ 7 ]
initial
begin
	out12Add_top_expected[7] = 1'bX;
end 
// expected out12Add_top[ 6 ]
initial
begin
	out12Add_top_expected[6] = 1'bX;
end 
// expected out12Add_top[ 5 ]
initial
begin
	out12Add_top_expected[5] = 1'bX;
end 
// expected out12Add_top[ 4 ]
initial
begin
	out12Add_top_expected[4] = 1'bX;
end 
// expected out12Add_top[ 3 ]
initial
begin
	out12Add_top_expected[3] = 1'bX;
end 
// expected out12Add_top[ 2 ]
initial
begin
	out12Add_top_expected[2] = 1'bX;
end 
// expected out12Add_top[ 1 ]
initial
begin
	out12Add_top_expected[1] = 1'bX;
end 
// expected out12Add_top[ 0 ]
initial
begin
	out12Add_top_expected[0] = 1'bX;
end 
// expected out13Add_top[ 7 ]
initial
begin
	out13Add_top_expected[7] = 1'bX;
end 
// expected out13Add_top[ 6 ]
initial
begin
	out13Add_top_expected[6] = 1'bX;
end 
// expected out13Add_top[ 5 ]
initial
begin
	out13Add_top_expected[5] = 1'bX;
end 
// expected out13Add_top[ 4 ]
initial
begin
	out13Add_top_expected[4] = 1'bX;
end 
// expected out13Add_top[ 3 ]
initial
begin
	out13Add_top_expected[3] = 1'bX;
end 
// expected out13Add_top[ 2 ]
initial
begin
	out13Add_top_expected[2] = 1'bX;
end 
// expected out13Add_top[ 1 ]
initial
begin
	out13Add_top_expected[1] = 1'bX;
end 
// expected out13Add_top[ 0 ]
initial
begin
	out13Add_top_expected[0] = 1'bX;
end 
// expected out14Add_top[ 7 ]
initial
begin
	out14Add_top_expected[7] = 1'bX;
end 
// expected out14Add_top[ 6 ]
initial
begin
	out14Add_top_expected[6] = 1'bX;
end 
// expected out14Add_top[ 5 ]
initial
begin
	out14Add_top_expected[5] = 1'bX;
end 
// expected out14Add_top[ 4 ]
initial
begin
	out14Add_top_expected[4] = 1'bX;
end 
// expected out14Add_top[ 3 ]
initial
begin
	out14Add_top_expected[3] = 1'bX;
end 
// expected out14Add_top[ 2 ]
initial
begin
	out14Add_top_expected[2] = 1'bX;
end 
// expected out14Add_top[ 1 ]
initial
begin
	out14Add_top_expected[1] = 1'bX;
end 
// expected out14Add_top[ 0 ]
initial
begin
	out14Add_top_expected[0] = 1'bX;
end 
// expected out15Add_top[ 7 ]
initial
begin
	out15Add_top_expected[7] = 1'bX;
end 
// expected out15Add_top[ 6 ]
initial
begin
	out15Add_top_expected[6] = 1'bX;
end 
// expected out15Add_top[ 5 ]
initial
begin
	out15Add_top_expected[5] = 1'bX;
end 
// expected out15Add_top[ 4 ]
initial
begin
	out15Add_top_expected[4] = 1'bX;
end 
// expected out15Add_top[ 3 ]
initial
begin
	out15Add_top_expected[3] = 1'bX;
end 
// expected out15Add_top[ 2 ]
initial
begin
	out15Add_top_expected[2] = 1'bX;
end 
// expected out15Add_top[ 1 ]
initial
begin
	out15Add_top_expected[1] = 1'bX;
end 
// expected out15Add_top[ 0 ]
initial
begin
	out15Add_top_expected[0] = 1'bX;
end 
// generate trigger
always @(out0Add_top_expected or out0Add_top or out1Add_top_expected or out1Add_top or out2Add_top_expected or out2Add_top or out3Add_top_expected or out3Add_top or out4Add_top_expected or out4Add_top or out5Add_top_expected or out5Add_top or out6Add_top_expected or out6Add_top or out7Add_top_expected or out7Add_top or out8Add_top_expected or out8Add_top or out9Add_top_expected or out9Add_top or out10Add_top_expected or out10Add_top or out11Add_top_expected or out11Add_top or out12Add_top_expected or out12Add_top or out13Add_top_expected or out13Add_top or out14Add_top_expected or out14Add_top or out15Add_top_expected or out15Add_top)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected out0Add_top = %b | expected out1Add_top = %b | expected out2Add_top = %b | expected out3Add_top = %b | expected out4Add_top = %b | expected out5Add_top = %b | expected out6Add_top = %b | expected out7Add_top = %b | expected out8Add_top = %b | expected out9Add_top = %b | expected out10Add_top = %b | expected out11Add_top = %b | expected out12Add_top = %b | expected out13Add_top = %b | expected out14Add_top = %b | expected out15Add_top = %b | ",out0Add_top_expected_prev,out1Add_top_expected_prev,out2Add_top_expected_prev,out3Add_top_expected_prev,out4Add_top_expected_prev,out5Add_top_expected_prev,out6Add_top_expected_prev,out7Add_top_expected_prev,out8Add_top_expected_prev,out9Add_top_expected_prev,out10Add_top_expected_prev,out11Add_top_expected_prev,out12Add_top_expected_prev,out13Add_top_expected_prev,out14Add_top_expected_prev,out15Add_top_expected_prev);
	$display("| real out0Add_top = %b | real out1Add_top = %b | real out2Add_top = %b | real out3Add_top = %b | real out4Add_top = %b | real out5Add_top = %b | real out6Add_top = %b | real out7Add_top = %b | real out8Add_top = %b | real out9Add_top = %b | real out10Add_top = %b | real out11Add_top = %b | real out12Add_top = %b | real out13Add_top = %b | real out14Add_top = %b | real out15Add_top = %b | ",out0Add_top_prev,out1Add_top_prev,out2Add_top_prev,out3Add_top_prev,out4Add_top_prev,out5Add_top_prev,out6Add_top_prev,out7Add_top_prev,out8Add_top_prev,out9Add_top_prev,out10Add_top_prev,out11Add_top_prev,out12Add_top_prev,out13Add_top_prev,out14Add_top_prev,out15Add_top_prev);
`endif
	if (
		( out0Add_top_expected_prev[0] !== 1'bx ) && ( out0Add_top_prev[0] !== out0Add_top_expected_prev[0] )
		&& ((out0Add_top_expected_prev[0] !== last_out0Add_top_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0Add_top[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0Add_top_expected_prev);
		$display ("     Real value = %b", out0Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0Add_top_exp[0] = out0Add_top_expected_prev[0];
	end
	if (
		( out0Add_top_expected_prev[1] !== 1'bx ) && ( out0Add_top_prev[1] !== out0Add_top_expected_prev[1] )
		&& ((out0Add_top_expected_prev[1] !== last_out0Add_top_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0Add_top[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0Add_top_expected_prev);
		$display ("     Real value = %b", out0Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0Add_top_exp[1] = out0Add_top_expected_prev[1];
	end
	if (
		( out0Add_top_expected_prev[2] !== 1'bx ) && ( out0Add_top_prev[2] !== out0Add_top_expected_prev[2] )
		&& ((out0Add_top_expected_prev[2] !== last_out0Add_top_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0Add_top[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0Add_top_expected_prev);
		$display ("     Real value = %b", out0Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0Add_top_exp[2] = out0Add_top_expected_prev[2];
	end
	if (
		( out0Add_top_expected_prev[3] !== 1'bx ) && ( out0Add_top_prev[3] !== out0Add_top_expected_prev[3] )
		&& ((out0Add_top_expected_prev[3] !== last_out0Add_top_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0Add_top[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0Add_top_expected_prev);
		$display ("     Real value = %b", out0Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0Add_top_exp[3] = out0Add_top_expected_prev[3];
	end
	if (
		( out0Add_top_expected_prev[4] !== 1'bx ) && ( out0Add_top_prev[4] !== out0Add_top_expected_prev[4] )
		&& ((out0Add_top_expected_prev[4] !== last_out0Add_top_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0Add_top[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0Add_top_expected_prev);
		$display ("     Real value = %b", out0Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0Add_top_exp[4] = out0Add_top_expected_prev[4];
	end
	if (
		( out0Add_top_expected_prev[5] !== 1'bx ) && ( out0Add_top_prev[5] !== out0Add_top_expected_prev[5] )
		&& ((out0Add_top_expected_prev[5] !== last_out0Add_top_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0Add_top[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0Add_top_expected_prev);
		$display ("     Real value = %b", out0Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0Add_top_exp[5] = out0Add_top_expected_prev[5];
	end
	if (
		( out0Add_top_expected_prev[6] !== 1'bx ) && ( out0Add_top_prev[6] !== out0Add_top_expected_prev[6] )
		&& ((out0Add_top_expected_prev[6] !== last_out0Add_top_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0Add_top[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0Add_top_expected_prev);
		$display ("     Real value = %b", out0Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0Add_top_exp[6] = out0Add_top_expected_prev[6];
	end
	if (
		( out0Add_top_expected_prev[7] !== 1'bx ) && ( out0Add_top_prev[7] !== out0Add_top_expected_prev[7] )
		&& ((out0Add_top_expected_prev[7] !== last_out0Add_top_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out0Add_top[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out0Add_top_expected_prev);
		$display ("     Real value = %b", out0Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out0Add_top_exp[7] = out0Add_top_expected_prev[7];
	end
	if (
		( out1Add_top_expected_prev[0] !== 1'bx ) && ( out1Add_top_prev[0] !== out1Add_top_expected_prev[0] )
		&& ((out1Add_top_expected_prev[0] !== last_out1Add_top_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1Add_top[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1Add_top_expected_prev);
		$display ("     Real value = %b", out1Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out1Add_top_exp[0] = out1Add_top_expected_prev[0];
	end
	if (
		( out1Add_top_expected_prev[1] !== 1'bx ) && ( out1Add_top_prev[1] !== out1Add_top_expected_prev[1] )
		&& ((out1Add_top_expected_prev[1] !== last_out1Add_top_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1Add_top[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1Add_top_expected_prev);
		$display ("     Real value = %b", out1Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out1Add_top_exp[1] = out1Add_top_expected_prev[1];
	end
	if (
		( out1Add_top_expected_prev[2] !== 1'bx ) && ( out1Add_top_prev[2] !== out1Add_top_expected_prev[2] )
		&& ((out1Add_top_expected_prev[2] !== last_out1Add_top_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1Add_top[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1Add_top_expected_prev);
		$display ("     Real value = %b", out1Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out1Add_top_exp[2] = out1Add_top_expected_prev[2];
	end
	if (
		( out1Add_top_expected_prev[3] !== 1'bx ) && ( out1Add_top_prev[3] !== out1Add_top_expected_prev[3] )
		&& ((out1Add_top_expected_prev[3] !== last_out1Add_top_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1Add_top[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1Add_top_expected_prev);
		$display ("     Real value = %b", out1Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out1Add_top_exp[3] = out1Add_top_expected_prev[3];
	end
	if (
		( out1Add_top_expected_prev[4] !== 1'bx ) && ( out1Add_top_prev[4] !== out1Add_top_expected_prev[4] )
		&& ((out1Add_top_expected_prev[4] !== last_out1Add_top_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1Add_top[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1Add_top_expected_prev);
		$display ("     Real value = %b", out1Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out1Add_top_exp[4] = out1Add_top_expected_prev[4];
	end
	if (
		( out1Add_top_expected_prev[5] !== 1'bx ) && ( out1Add_top_prev[5] !== out1Add_top_expected_prev[5] )
		&& ((out1Add_top_expected_prev[5] !== last_out1Add_top_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1Add_top[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1Add_top_expected_prev);
		$display ("     Real value = %b", out1Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out1Add_top_exp[5] = out1Add_top_expected_prev[5];
	end
	if (
		( out1Add_top_expected_prev[6] !== 1'bx ) && ( out1Add_top_prev[6] !== out1Add_top_expected_prev[6] )
		&& ((out1Add_top_expected_prev[6] !== last_out1Add_top_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1Add_top[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1Add_top_expected_prev);
		$display ("     Real value = %b", out1Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out1Add_top_exp[6] = out1Add_top_expected_prev[6];
	end
	if (
		( out1Add_top_expected_prev[7] !== 1'bx ) && ( out1Add_top_prev[7] !== out1Add_top_expected_prev[7] )
		&& ((out1Add_top_expected_prev[7] !== last_out1Add_top_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1Add_top[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1Add_top_expected_prev);
		$display ("     Real value = %b", out1Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out1Add_top_exp[7] = out1Add_top_expected_prev[7];
	end
	if (
		( out2Add_top_expected_prev[0] !== 1'bx ) && ( out2Add_top_prev[0] !== out2Add_top_expected_prev[0] )
		&& ((out2Add_top_expected_prev[0] !== last_out2Add_top_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2Add_top[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2Add_top_expected_prev);
		$display ("     Real value = %b", out2Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out2Add_top_exp[0] = out2Add_top_expected_prev[0];
	end
	if (
		( out2Add_top_expected_prev[1] !== 1'bx ) && ( out2Add_top_prev[1] !== out2Add_top_expected_prev[1] )
		&& ((out2Add_top_expected_prev[1] !== last_out2Add_top_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2Add_top[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2Add_top_expected_prev);
		$display ("     Real value = %b", out2Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out2Add_top_exp[1] = out2Add_top_expected_prev[1];
	end
	if (
		( out2Add_top_expected_prev[2] !== 1'bx ) && ( out2Add_top_prev[2] !== out2Add_top_expected_prev[2] )
		&& ((out2Add_top_expected_prev[2] !== last_out2Add_top_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2Add_top[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2Add_top_expected_prev);
		$display ("     Real value = %b", out2Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out2Add_top_exp[2] = out2Add_top_expected_prev[2];
	end
	if (
		( out2Add_top_expected_prev[3] !== 1'bx ) && ( out2Add_top_prev[3] !== out2Add_top_expected_prev[3] )
		&& ((out2Add_top_expected_prev[3] !== last_out2Add_top_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2Add_top[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2Add_top_expected_prev);
		$display ("     Real value = %b", out2Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out2Add_top_exp[3] = out2Add_top_expected_prev[3];
	end
	if (
		( out2Add_top_expected_prev[4] !== 1'bx ) && ( out2Add_top_prev[4] !== out2Add_top_expected_prev[4] )
		&& ((out2Add_top_expected_prev[4] !== last_out2Add_top_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2Add_top[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2Add_top_expected_prev);
		$display ("     Real value = %b", out2Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out2Add_top_exp[4] = out2Add_top_expected_prev[4];
	end
	if (
		( out2Add_top_expected_prev[5] !== 1'bx ) && ( out2Add_top_prev[5] !== out2Add_top_expected_prev[5] )
		&& ((out2Add_top_expected_prev[5] !== last_out2Add_top_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2Add_top[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2Add_top_expected_prev);
		$display ("     Real value = %b", out2Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out2Add_top_exp[5] = out2Add_top_expected_prev[5];
	end
	if (
		( out2Add_top_expected_prev[6] !== 1'bx ) && ( out2Add_top_prev[6] !== out2Add_top_expected_prev[6] )
		&& ((out2Add_top_expected_prev[6] !== last_out2Add_top_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2Add_top[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2Add_top_expected_prev);
		$display ("     Real value = %b", out2Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out2Add_top_exp[6] = out2Add_top_expected_prev[6];
	end
	if (
		( out2Add_top_expected_prev[7] !== 1'bx ) && ( out2Add_top_prev[7] !== out2Add_top_expected_prev[7] )
		&& ((out2Add_top_expected_prev[7] !== last_out2Add_top_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2Add_top[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2Add_top_expected_prev);
		$display ("     Real value = %b", out2Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out2Add_top_exp[7] = out2Add_top_expected_prev[7];
	end
	if (
		( out3Add_top_expected_prev[0] !== 1'bx ) && ( out3Add_top_prev[0] !== out3Add_top_expected_prev[0] )
		&& ((out3Add_top_expected_prev[0] !== last_out3Add_top_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out3Add_top[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out3Add_top_expected_prev);
		$display ("     Real value = %b", out3Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out3Add_top_exp[0] = out3Add_top_expected_prev[0];
	end
	if (
		( out3Add_top_expected_prev[1] !== 1'bx ) && ( out3Add_top_prev[1] !== out3Add_top_expected_prev[1] )
		&& ((out3Add_top_expected_prev[1] !== last_out3Add_top_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out3Add_top[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out3Add_top_expected_prev);
		$display ("     Real value = %b", out3Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out3Add_top_exp[1] = out3Add_top_expected_prev[1];
	end
	if (
		( out3Add_top_expected_prev[2] !== 1'bx ) && ( out3Add_top_prev[2] !== out3Add_top_expected_prev[2] )
		&& ((out3Add_top_expected_prev[2] !== last_out3Add_top_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out3Add_top[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out3Add_top_expected_prev);
		$display ("     Real value = %b", out3Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out3Add_top_exp[2] = out3Add_top_expected_prev[2];
	end
	if (
		( out3Add_top_expected_prev[3] !== 1'bx ) && ( out3Add_top_prev[3] !== out3Add_top_expected_prev[3] )
		&& ((out3Add_top_expected_prev[3] !== last_out3Add_top_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out3Add_top[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out3Add_top_expected_prev);
		$display ("     Real value = %b", out3Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out3Add_top_exp[3] = out3Add_top_expected_prev[3];
	end
	if (
		( out3Add_top_expected_prev[4] !== 1'bx ) && ( out3Add_top_prev[4] !== out3Add_top_expected_prev[4] )
		&& ((out3Add_top_expected_prev[4] !== last_out3Add_top_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out3Add_top[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out3Add_top_expected_prev);
		$display ("     Real value = %b", out3Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out3Add_top_exp[4] = out3Add_top_expected_prev[4];
	end
	if (
		( out3Add_top_expected_prev[5] !== 1'bx ) && ( out3Add_top_prev[5] !== out3Add_top_expected_prev[5] )
		&& ((out3Add_top_expected_prev[5] !== last_out3Add_top_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out3Add_top[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out3Add_top_expected_prev);
		$display ("     Real value = %b", out3Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out3Add_top_exp[5] = out3Add_top_expected_prev[5];
	end
	if (
		( out3Add_top_expected_prev[6] !== 1'bx ) && ( out3Add_top_prev[6] !== out3Add_top_expected_prev[6] )
		&& ((out3Add_top_expected_prev[6] !== last_out3Add_top_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out3Add_top[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out3Add_top_expected_prev);
		$display ("     Real value = %b", out3Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out3Add_top_exp[6] = out3Add_top_expected_prev[6];
	end
	if (
		( out3Add_top_expected_prev[7] !== 1'bx ) && ( out3Add_top_prev[7] !== out3Add_top_expected_prev[7] )
		&& ((out3Add_top_expected_prev[7] !== last_out3Add_top_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out3Add_top[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out3Add_top_expected_prev);
		$display ("     Real value = %b", out3Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out3Add_top_exp[7] = out3Add_top_expected_prev[7];
	end
	if (
		( out4Add_top_expected_prev[0] !== 1'bx ) && ( out4Add_top_prev[0] !== out4Add_top_expected_prev[0] )
		&& ((out4Add_top_expected_prev[0] !== last_out4Add_top_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out4Add_top[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out4Add_top_expected_prev);
		$display ("     Real value = %b", out4Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out4Add_top_exp[0] = out4Add_top_expected_prev[0];
	end
	if (
		( out4Add_top_expected_prev[1] !== 1'bx ) && ( out4Add_top_prev[1] !== out4Add_top_expected_prev[1] )
		&& ((out4Add_top_expected_prev[1] !== last_out4Add_top_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out4Add_top[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out4Add_top_expected_prev);
		$display ("     Real value = %b", out4Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out4Add_top_exp[1] = out4Add_top_expected_prev[1];
	end
	if (
		( out4Add_top_expected_prev[2] !== 1'bx ) && ( out4Add_top_prev[2] !== out4Add_top_expected_prev[2] )
		&& ((out4Add_top_expected_prev[2] !== last_out4Add_top_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out4Add_top[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out4Add_top_expected_prev);
		$display ("     Real value = %b", out4Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out4Add_top_exp[2] = out4Add_top_expected_prev[2];
	end
	if (
		( out4Add_top_expected_prev[3] !== 1'bx ) && ( out4Add_top_prev[3] !== out4Add_top_expected_prev[3] )
		&& ((out4Add_top_expected_prev[3] !== last_out4Add_top_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out4Add_top[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out4Add_top_expected_prev);
		$display ("     Real value = %b", out4Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out4Add_top_exp[3] = out4Add_top_expected_prev[3];
	end
	if (
		( out4Add_top_expected_prev[4] !== 1'bx ) && ( out4Add_top_prev[4] !== out4Add_top_expected_prev[4] )
		&& ((out4Add_top_expected_prev[4] !== last_out4Add_top_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out4Add_top[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out4Add_top_expected_prev);
		$display ("     Real value = %b", out4Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out4Add_top_exp[4] = out4Add_top_expected_prev[4];
	end
	if (
		( out4Add_top_expected_prev[5] !== 1'bx ) && ( out4Add_top_prev[5] !== out4Add_top_expected_prev[5] )
		&& ((out4Add_top_expected_prev[5] !== last_out4Add_top_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out4Add_top[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out4Add_top_expected_prev);
		$display ("     Real value = %b", out4Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out4Add_top_exp[5] = out4Add_top_expected_prev[5];
	end
	if (
		( out4Add_top_expected_prev[6] !== 1'bx ) && ( out4Add_top_prev[6] !== out4Add_top_expected_prev[6] )
		&& ((out4Add_top_expected_prev[6] !== last_out4Add_top_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out4Add_top[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out4Add_top_expected_prev);
		$display ("     Real value = %b", out4Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out4Add_top_exp[6] = out4Add_top_expected_prev[6];
	end
	if (
		( out4Add_top_expected_prev[7] !== 1'bx ) && ( out4Add_top_prev[7] !== out4Add_top_expected_prev[7] )
		&& ((out4Add_top_expected_prev[7] !== last_out4Add_top_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out4Add_top[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out4Add_top_expected_prev);
		$display ("     Real value = %b", out4Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out4Add_top_exp[7] = out4Add_top_expected_prev[7];
	end
	if (
		( out5Add_top_expected_prev[0] !== 1'bx ) && ( out5Add_top_prev[0] !== out5Add_top_expected_prev[0] )
		&& ((out5Add_top_expected_prev[0] !== last_out5Add_top_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out5Add_top[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out5Add_top_expected_prev);
		$display ("     Real value = %b", out5Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_out5Add_top_exp[0] = out5Add_top_expected_prev[0];
	end
	if (
		( out5Add_top_expected_prev[1] !== 1'bx ) && ( out5Add_top_prev[1] !== out5Add_top_expected_prev[1] )
		&& ((out5Add_top_expected_prev[1] !== last_out5Add_top_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out5Add_top[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out5Add_top_expected_prev);
		$display ("     Real value = %b", out5Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_out5Add_top_exp[1] = out5Add_top_expected_prev[1];
	end
	if (
		( out5Add_top_expected_prev[2] !== 1'bx ) && ( out5Add_top_prev[2] !== out5Add_top_expected_prev[2] )
		&& ((out5Add_top_expected_prev[2] !== last_out5Add_top_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out5Add_top[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out5Add_top_expected_prev);
		$display ("     Real value = %b", out5Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_out5Add_top_exp[2] = out5Add_top_expected_prev[2];
	end
	if (
		( out5Add_top_expected_prev[3] !== 1'bx ) && ( out5Add_top_prev[3] !== out5Add_top_expected_prev[3] )
		&& ((out5Add_top_expected_prev[3] !== last_out5Add_top_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out5Add_top[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out5Add_top_expected_prev);
		$display ("     Real value = %b", out5Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_out5Add_top_exp[3] = out5Add_top_expected_prev[3];
	end
	if (
		( out5Add_top_expected_prev[4] !== 1'bx ) && ( out5Add_top_prev[4] !== out5Add_top_expected_prev[4] )
		&& ((out5Add_top_expected_prev[4] !== last_out5Add_top_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out5Add_top[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out5Add_top_expected_prev);
		$display ("     Real value = %b", out5Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_out5Add_top_exp[4] = out5Add_top_expected_prev[4];
	end
	if (
		( out5Add_top_expected_prev[5] !== 1'bx ) && ( out5Add_top_prev[5] !== out5Add_top_expected_prev[5] )
		&& ((out5Add_top_expected_prev[5] !== last_out5Add_top_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out5Add_top[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out5Add_top_expected_prev);
		$display ("     Real value = %b", out5Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_out5Add_top_exp[5] = out5Add_top_expected_prev[5];
	end
	if (
		( out5Add_top_expected_prev[6] !== 1'bx ) && ( out5Add_top_prev[6] !== out5Add_top_expected_prev[6] )
		&& ((out5Add_top_expected_prev[6] !== last_out5Add_top_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out5Add_top[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out5Add_top_expected_prev);
		$display ("     Real value = %b", out5Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_out5Add_top_exp[6] = out5Add_top_expected_prev[6];
	end
	if (
		( out5Add_top_expected_prev[7] !== 1'bx ) && ( out5Add_top_prev[7] !== out5Add_top_expected_prev[7] )
		&& ((out5Add_top_expected_prev[7] !== last_out5Add_top_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out5Add_top[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out5Add_top_expected_prev);
		$display ("     Real value = %b", out5Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_out5Add_top_exp[7] = out5Add_top_expected_prev[7];
	end
	if (
		( out6Add_top_expected_prev[0] !== 1'bx ) && ( out6Add_top_prev[0] !== out6Add_top_expected_prev[0] )
		&& ((out6Add_top_expected_prev[0] !== last_out6Add_top_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out6Add_top[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out6Add_top_expected_prev);
		$display ("     Real value = %b", out6Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out6Add_top_exp[0] = out6Add_top_expected_prev[0];
	end
	if (
		( out6Add_top_expected_prev[1] !== 1'bx ) && ( out6Add_top_prev[1] !== out6Add_top_expected_prev[1] )
		&& ((out6Add_top_expected_prev[1] !== last_out6Add_top_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out6Add_top[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out6Add_top_expected_prev);
		$display ("     Real value = %b", out6Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out6Add_top_exp[1] = out6Add_top_expected_prev[1];
	end
	if (
		( out6Add_top_expected_prev[2] !== 1'bx ) && ( out6Add_top_prev[2] !== out6Add_top_expected_prev[2] )
		&& ((out6Add_top_expected_prev[2] !== last_out6Add_top_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out6Add_top[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out6Add_top_expected_prev);
		$display ("     Real value = %b", out6Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out6Add_top_exp[2] = out6Add_top_expected_prev[2];
	end
	if (
		( out6Add_top_expected_prev[3] !== 1'bx ) && ( out6Add_top_prev[3] !== out6Add_top_expected_prev[3] )
		&& ((out6Add_top_expected_prev[3] !== last_out6Add_top_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out6Add_top[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out6Add_top_expected_prev);
		$display ("     Real value = %b", out6Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out6Add_top_exp[3] = out6Add_top_expected_prev[3];
	end
	if (
		( out6Add_top_expected_prev[4] !== 1'bx ) && ( out6Add_top_prev[4] !== out6Add_top_expected_prev[4] )
		&& ((out6Add_top_expected_prev[4] !== last_out6Add_top_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out6Add_top[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out6Add_top_expected_prev);
		$display ("     Real value = %b", out6Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out6Add_top_exp[4] = out6Add_top_expected_prev[4];
	end
	if (
		( out6Add_top_expected_prev[5] !== 1'bx ) && ( out6Add_top_prev[5] !== out6Add_top_expected_prev[5] )
		&& ((out6Add_top_expected_prev[5] !== last_out6Add_top_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out6Add_top[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out6Add_top_expected_prev);
		$display ("     Real value = %b", out6Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out6Add_top_exp[5] = out6Add_top_expected_prev[5];
	end
	if (
		( out6Add_top_expected_prev[6] !== 1'bx ) && ( out6Add_top_prev[6] !== out6Add_top_expected_prev[6] )
		&& ((out6Add_top_expected_prev[6] !== last_out6Add_top_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out6Add_top[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out6Add_top_expected_prev);
		$display ("     Real value = %b", out6Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out6Add_top_exp[6] = out6Add_top_expected_prev[6];
	end
	if (
		( out6Add_top_expected_prev[7] !== 1'bx ) && ( out6Add_top_prev[7] !== out6Add_top_expected_prev[7] )
		&& ((out6Add_top_expected_prev[7] !== last_out6Add_top_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out6Add_top[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out6Add_top_expected_prev);
		$display ("     Real value = %b", out6Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out6Add_top_exp[7] = out6Add_top_expected_prev[7];
	end
	if (
		( out7Add_top_expected_prev[0] !== 1'bx ) && ( out7Add_top_prev[0] !== out7Add_top_expected_prev[0] )
		&& ((out7Add_top_expected_prev[0] !== last_out7Add_top_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out7Add_top[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out7Add_top_expected_prev);
		$display ("     Real value = %b", out7Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out7Add_top_exp[0] = out7Add_top_expected_prev[0];
	end
	if (
		( out7Add_top_expected_prev[1] !== 1'bx ) && ( out7Add_top_prev[1] !== out7Add_top_expected_prev[1] )
		&& ((out7Add_top_expected_prev[1] !== last_out7Add_top_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out7Add_top[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out7Add_top_expected_prev);
		$display ("     Real value = %b", out7Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out7Add_top_exp[1] = out7Add_top_expected_prev[1];
	end
	if (
		( out7Add_top_expected_prev[2] !== 1'bx ) && ( out7Add_top_prev[2] !== out7Add_top_expected_prev[2] )
		&& ((out7Add_top_expected_prev[2] !== last_out7Add_top_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out7Add_top[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out7Add_top_expected_prev);
		$display ("     Real value = %b", out7Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out7Add_top_exp[2] = out7Add_top_expected_prev[2];
	end
	if (
		( out7Add_top_expected_prev[3] !== 1'bx ) && ( out7Add_top_prev[3] !== out7Add_top_expected_prev[3] )
		&& ((out7Add_top_expected_prev[3] !== last_out7Add_top_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out7Add_top[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out7Add_top_expected_prev);
		$display ("     Real value = %b", out7Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out7Add_top_exp[3] = out7Add_top_expected_prev[3];
	end
	if (
		( out7Add_top_expected_prev[4] !== 1'bx ) && ( out7Add_top_prev[4] !== out7Add_top_expected_prev[4] )
		&& ((out7Add_top_expected_prev[4] !== last_out7Add_top_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out7Add_top[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out7Add_top_expected_prev);
		$display ("     Real value = %b", out7Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out7Add_top_exp[4] = out7Add_top_expected_prev[4];
	end
	if (
		( out7Add_top_expected_prev[5] !== 1'bx ) && ( out7Add_top_prev[5] !== out7Add_top_expected_prev[5] )
		&& ((out7Add_top_expected_prev[5] !== last_out7Add_top_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out7Add_top[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out7Add_top_expected_prev);
		$display ("     Real value = %b", out7Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out7Add_top_exp[5] = out7Add_top_expected_prev[5];
	end
	if (
		( out7Add_top_expected_prev[6] !== 1'bx ) && ( out7Add_top_prev[6] !== out7Add_top_expected_prev[6] )
		&& ((out7Add_top_expected_prev[6] !== last_out7Add_top_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out7Add_top[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out7Add_top_expected_prev);
		$display ("     Real value = %b", out7Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out7Add_top_exp[6] = out7Add_top_expected_prev[6];
	end
	if (
		( out7Add_top_expected_prev[7] !== 1'bx ) && ( out7Add_top_prev[7] !== out7Add_top_expected_prev[7] )
		&& ((out7Add_top_expected_prev[7] !== last_out7Add_top_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out7Add_top[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out7Add_top_expected_prev);
		$display ("     Real value = %b", out7Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out7Add_top_exp[7] = out7Add_top_expected_prev[7];
	end
	if (
		( out8Add_top_expected_prev[0] !== 1'bx ) && ( out8Add_top_prev[0] !== out8Add_top_expected_prev[0] )
		&& ((out8Add_top_expected_prev[0] !== last_out8Add_top_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out8Add_top[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out8Add_top_expected_prev);
		$display ("     Real value = %b", out8Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out8Add_top_exp[0] = out8Add_top_expected_prev[0];
	end
	if (
		( out8Add_top_expected_prev[1] !== 1'bx ) && ( out8Add_top_prev[1] !== out8Add_top_expected_prev[1] )
		&& ((out8Add_top_expected_prev[1] !== last_out8Add_top_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out8Add_top[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out8Add_top_expected_prev);
		$display ("     Real value = %b", out8Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out8Add_top_exp[1] = out8Add_top_expected_prev[1];
	end
	if (
		( out8Add_top_expected_prev[2] !== 1'bx ) && ( out8Add_top_prev[2] !== out8Add_top_expected_prev[2] )
		&& ((out8Add_top_expected_prev[2] !== last_out8Add_top_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out8Add_top[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out8Add_top_expected_prev);
		$display ("     Real value = %b", out8Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out8Add_top_exp[2] = out8Add_top_expected_prev[2];
	end
	if (
		( out8Add_top_expected_prev[3] !== 1'bx ) && ( out8Add_top_prev[3] !== out8Add_top_expected_prev[3] )
		&& ((out8Add_top_expected_prev[3] !== last_out8Add_top_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out8Add_top[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out8Add_top_expected_prev);
		$display ("     Real value = %b", out8Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out8Add_top_exp[3] = out8Add_top_expected_prev[3];
	end
	if (
		( out8Add_top_expected_prev[4] !== 1'bx ) && ( out8Add_top_prev[4] !== out8Add_top_expected_prev[4] )
		&& ((out8Add_top_expected_prev[4] !== last_out8Add_top_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out8Add_top[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out8Add_top_expected_prev);
		$display ("     Real value = %b", out8Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out8Add_top_exp[4] = out8Add_top_expected_prev[4];
	end
	if (
		( out8Add_top_expected_prev[5] !== 1'bx ) && ( out8Add_top_prev[5] !== out8Add_top_expected_prev[5] )
		&& ((out8Add_top_expected_prev[5] !== last_out8Add_top_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out8Add_top[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out8Add_top_expected_prev);
		$display ("     Real value = %b", out8Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out8Add_top_exp[5] = out8Add_top_expected_prev[5];
	end
	if (
		( out8Add_top_expected_prev[6] !== 1'bx ) && ( out8Add_top_prev[6] !== out8Add_top_expected_prev[6] )
		&& ((out8Add_top_expected_prev[6] !== last_out8Add_top_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out8Add_top[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out8Add_top_expected_prev);
		$display ("     Real value = %b", out8Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out8Add_top_exp[6] = out8Add_top_expected_prev[6];
	end
	if (
		( out8Add_top_expected_prev[7] !== 1'bx ) && ( out8Add_top_prev[7] !== out8Add_top_expected_prev[7] )
		&& ((out8Add_top_expected_prev[7] !== last_out8Add_top_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out8Add_top[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out8Add_top_expected_prev);
		$display ("     Real value = %b", out8Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out8Add_top_exp[7] = out8Add_top_expected_prev[7];
	end
	if (
		( out9Add_top_expected_prev[0] !== 1'bx ) && ( out9Add_top_prev[0] !== out9Add_top_expected_prev[0] )
		&& ((out9Add_top_expected_prev[0] !== last_out9Add_top_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out9Add_top[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out9Add_top_expected_prev);
		$display ("     Real value = %b", out9Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out9Add_top_exp[0] = out9Add_top_expected_prev[0];
	end
	if (
		( out9Add_top_expected_prev[1] !== 1'bx ) && ( out9Add_top_prev[1] !== out9Add_top_expected_prev[1] )
		&& ((out9Add_top_expected_prev[1] !== last_out9Add_top_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out9Add_top[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out9Add_top_expected_prev);
		$display ("     Real value = %b", out9Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out9Add_top_exp[1] = out9Add_top_expected_prev[1];
	end
	if (
		( out9Add_top_expected_prev[2] !== 1'bx ) && ( out9Add_top_prev[2] !== out9Add_top_expected_prev[2] )
		&& ((out9Add_top_expected_prev[2] !== last_out9Add_top_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out9Add_top[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out9Add_top_expected_prev);
		$display ("     Real value = %b", out9Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out9Add_top_exp[2] = out9Add_top_expected_prev[2];
	end
	if (
		( out9Add_top_expected_prev[3] !== 1'bx ) && ( out9Add_top_prev[3] !== out9Add_top_expected_prev[3] )
		&& ((out9Add_top_expected_prev[3] !== last_out9Add_top_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out9Add_top[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out9Add_top_expected_prev);
		$display ("     Real value = %b", out9Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out9Add_top_exp[3] = out9Add_top_expected_prev[3];
	end
	if (
		( out9Add_top_expected_prev[4] !== 1'bx ) && ( out9Add_top_prev[4] !== out9Add_top_expected_prev[4] )
		&& ((out9Add_top_expected_prev[4] !== last_out9Add_top_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out9Add_top[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out9Add_top_expected_prev);
		$display ("     Real value = %b", out9Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out9Add_top_exp[4] = out9Add_top_expected_prev[4];
	end
	if (
		( out9Add_top_expected_prev[5] !== 1'bx ) && ( out9Add_top_prev[5] !== out9Add_top_expected_prev[5] )
		&& ((out9Add_top_expected_prev[5] !== last_out9Add_top_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out9Add_top[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out9Add_top_expected_prev);
		$display ("     Real value = %b", out9Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out9Add_top_exp[5] = out9Add_top_expected_prev[5];
	end
	if (
		( out9Add_top_expected_prev[6] !== 1'bx ) && ( out9Add_top_prev[6] !== out9Add_top_expected_prev[6] )
		&& ((out9Add_top_expected_prev[6] !== last_out9Add_top_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out9Add_top[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out9Add_top_expected_prev);
		$display ("     Real value = %b", out9Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out9Add_top_exp[6] = out9Add_top_expected_prev[6];
	end
	if (
		( out9Add_top_expected_prev[7] !== 1'bx ) && ( out9Add_top_prev[7] !== out9Add_top_expected_prev[7] )
		&& ((out9Add_top_expected_prev[7] !== last_out9Add_top_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out9Add_top[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out9Add_top_expected_prev);
		$display ("     Real value = %b", out9Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out9Add_top_exp[7] = out9Add_top_expected_prev[7];
	end
	if (
		( out10Add_top_expected_prev[0] !== 1'bx ) && ( out10Add_top_prev[0] !== out10Add_top_expected_prev[0] )
		&& ((out10Add_top_expected_prev[0] !== last_out10Add_top_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out10Add_top[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out10Add_top_expected_prev);
		$display ("     Real value = %b", out10Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_out10Add_top_exp[0] = out10Add_top_expected_prev[0];
	end
	if (
		( out10Add_top_expected_prev[1] !== 1'bx ) && ( out10Add_top_prev[1] !== out10Add_top_expected_prev[1] )
		&& ((out10Add_top_expected_prev[1] !== last_out10Add_top_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out10Add_top[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out10Add_top_expected_prev);
		$display ("     Real value = %b", out10Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_out10Add_top_exp[1] = out10Add_top_expected_prev[1];
	end
	if (
		( out10Add_top_expected_prev[2] !== 1'bx ) && ( out10Add_top_prev[2] !== out10Add_top_expected_prev[2] )
		&& ((out10Add_top_expected_prev[2] !== last_out10Add_top_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out10Add_top[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out10Add_top_expected_prev);
		$display ("     Real value = %b", out10Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_out10Add_top_exp[2] = out10Add_top_expected_prev[2];
	end
	if (
		( out10Add_top_expected_prev[3] !== 1'bx ) && ( out10Add_top_prev[3] !== out10Add_top_expected_prev[3] )
		&& ((out10Add_top_expected_prev[3] !== last_out10Add_top_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out10Add_top[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out10Add_top_expected_prev);
		$display ("     Real value = %b", out10Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_out10Add_top_exp[3] = out10Add_top_expected_prev[3];
	end
	if (
		( out10Add_top_expected_prev[4] !== 1'bx ) && ( out10Add_top_prev[4] !== out10Add_top_expected_prev[4] )
		&& ((out10Add_top_expected_prev[4] !== last_out10Add_top_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out10Add_top[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out10Add_top_expected_prev);
		$display ("     Real value = %b", out10Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_out10Add_top_exp[4] = out10Add_top_expected_prev[4];
	end
	if (
		( out10Add_top_expected_prev[5] !== 1'bx ) && ( out10Add_top_prev[5] !== out10Add_top_expected_prev[5] )
		&& ((out10Add_top_expected_prev[5] !== last_out10Add_top_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out10Add_top[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out10Add_top_expected_prev);
		$display ("     Real value = %b", out10Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_out10Add_top_exp[5] = out10Add_top_expected_prev[5];
	end
	if (
		( out10Add_top_expected_prev[6] !== 1'bx ) && ( out10Add_top_prev[6] !== out10Add_top_expected_prev[6] )
		&& ((out10Add_top_expected_prev[6] !== last_out10Add_top_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out10Add_top[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out10Add_top_expected_prev);
		$display ("     Real value = %b", out10Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_out10Add_top_exp[6] = out10Add_top_expected_prev[6];
	end
	if (
		( out10Add_top_expected_prev[7] !== 1'bx ) && ( out10Add_top_prev[7] !== out10Add_top_expected_prev[7] )
		&& ((out10Add_top_expected_prev[7] !== last_out10Add_top_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out10Add_top[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out10Add_top_expected_prev);
		$display ("     Real value = %b", out10Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_out10Add_top_exp[7] = out10Add_top_expected_prev[7];
	end
	if (
		( out11Add_top_expected_prev[0] !== 1'bx ) && ( out11Add_top_prev[0] !== out11Add_top_expected_prev[0] )
		&& ((out11Add_top_expected_prev[0] !== last_out11Add_top_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out11Add_top[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out11Add_top_expected_prev);
		$display ("     Real value = %b", out11Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_out11Add_top_exp[0] = out11Add_top_expected_prev[0];
	end
	if (
		( out11Add_top_expected_prev[1] !== 1'bx ) && ( out11Add_top_prev[1] !== out11Add_top_expected_prev[1] )
		&& ((out11Add_top_expected_prev[1] !== last_out11Add_top_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out11Add_top[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out11Add_top_expected_prev);
		$display ("     Real value = %b", out11Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_out11Add_top_exp[1] = out11Add_top_expected_prev[1];
	end
	if (
		( out11Add_top_expected_prev[2] !== 1'bx ) && ( out11Add_top_prev[2] !== out11Add_top_expected_prev[2] )
		&& ((out11Add_top_expected_prev[2] !== last_out11Add_top_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out11Add_top[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out11Add_top_expected_prev);
		$display ("     Real value = %b", out11Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_out11Add_top_exp[2] = out11Add_top_expected_prev[2];
	end
	if (
		( out11Add_top_expected_prev[3] !== 1'bx ) && ( out11Add_top_prev[3] !== out11Add_top_expected_prev[3] )
		&& ((out11Add_top_expected_prev[3] !== last_out11Add_top_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out11Add_top[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out11Add_top_expected_prev);
		$display ("     Real value = %b", out11Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_out11Add_top_exp[3] = out11Add_top_expected_prev[3];
	end
	if (
		( out11Add_top_expected_prev[4] !== 1'bx ) && ( out11Add_top_prev[4] !== out11Add_top_expected_prev[4] )
		&& ((out11Add_top_expected_prev[4] !== last_out11Add_top_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out11Add_top[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out11Add_top_expected_prev);
		$display ("     Real value = %b", out11Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_out11Add_top_exp[4] = out11Add_top_expected_prev[4];
	end
	if (
		( out11Add_top_expected_prev[5] !== 1'bx ) && ( out11Add_top_prev[5] !== out11Add_top_expected_prev[5] )
		&& ((out11Add_top_expected_prev[5] !== last_out11Add_top_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out11Add_top[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out11Add_top_expected_prev);
		$display ("     Real value = %b", out11Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_out11Add_top_exp[5] = out11Add_top_expected_prev[5];
	end
	if (
		( out11Add_top_expected_prev[6] !== 1'bx ) && ( out11Add_top_prev[6] !== out11Add_top_expected_prev[6] )
		&& ((out11Add_top_expected_prev[6] !== last_out11Add_top_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out11Add_top[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out11Add_top_expected_prev);
		$display ("     Real value = %b", out11Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_out11Add_top_exp[6] = out11Add_top_expected_prev[6];
	end
	if (
		( out11Add_top_expected_prev[7] !== 1'bx ) && ( out11Add_top_prev[7] !== out11Add_top_expected_prev[7] )
		&& ((out11Add_top_expected_prev[7] !== last_out11Add_top_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out11Add_top[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out11Add_top_expected_prev);
		$display ("     Real value = %b", out11Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_out11Add_top_exp[7] = out11Add_top_expected_prev[7];
	end
	if (
		( out12Add_top_expected_prev[0] !== 1'bx ) && ( out12Add_top_prev[0] !== out12Add_top_expected_prev[0] )
		&& ((out12Add_top_expected_prev[0] !== last_out12Add_top_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out12Add_top[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out12Add_top_expected_prev);
		$display ("     Real value = %b", out12Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_out12Add_top_exp[0] = out12Add_top_expected_prev[0];
	end
	if (
		( out12Add_top_expected_prev[1] !== 1'bx ) && ( out12Add_top_prev[1] !== out12Add_top_expected_prev[1] )
		&& ((out12Add_top_expected_prev[1] !== last_out12Add_top_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out12Add_top[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out12Add_top_expected_prev);
		$display ("     Real value = %b", out12Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_out12Add_top_exp[1] = out12Add_top_expected_prev[1];
	end
	if (
		( out12Add_top_expected_prev[2] !== 1'bx ) && ( out12Add_top_prev[2] !== out12Add_top_expected_prev[2] )
		&& ((out12Add_top_expected_prev[2] !== last_out12Add_top_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out12Add_top[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out12Add_top_expected_prev);
		$display ("     Real value = %b", out12Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_out12Add_top_exp[2] = out12Add_top_expected_prev[2];
	end
	if (
		( out12Add_top_expected_prev[3] !== 1'bx ) && ( out12Add_top_prev[3] !== out12Add_top_expected_prev[3] )
		&& ((out12Add_top_expected_prev[3] !== last_out12Add_top_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out12Add_top[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out12Add_top_expected_prev);
		$display ("     Real value = %b", out12Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_out12Add_top_exp[3] = out12Add_top_expected_prev[3];
	end
	if (
		( out12Add_top_expected_prev[4] !== 1'bx ) && ( out12Add_top_prev[4] !== out12Add_top_expected_prev[4] )
		&& ((out12Add_top_expected_prev[4] !== last_out12Add_top_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out12Add_top[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out12Add_top_expected_prev);
		$display ("     Real value = %b", out12Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_out12Add_top_exp[4] = out12Add_top_expected_prev[4];
	end
	if (
		( out12Add_top_expected_prev[5] !== 1'bx ) && ( out12Add_top_prev[5] !== out12Add_top_expected_prev[5] )
		&& ((out12Add_top_expected_prev[5] !== last_out12Add_top_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out12Add_top[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out12Add_top_expected_prev);
		$display ("     Real value = %b", out12Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_out12Add_top_exp[5] = out12Add_top_expected_prev[5];
	end
	if (
		( out12Add_top_expected_prev[6] !== 1'bx ) && ( out12Add_top_prev[6] !== out12Add_top_expected_prev[6] )
		&& ((out12Add_top_expected_prev[6] !== last_out12Add_top_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out12Add_top[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out12Add_top_expected_prev);
		$display ("     Real value = %b", out12Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_out12Add_top_exp[6] = out12Add_top_expected_prev[6];
	end
	if (
		( out12Add_top_expected_prev[7] !== 1'bx ) && ( out12Add_top_prev[7] !== out12Add_top_expected_prev[7] )
		&& ((out12Add_top_expected_prev[7] !== last_out12Add_top_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out12Add_top[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out12Add_top_expected_prev);
		$display ("     Real value = %b", out12Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_out12Add_top_exp[7] = out12Add_top_expected_prev[7];
	end
	if (
		( out13Add_top_expected_prev[0] !== 1'bx ) && ( out13Add_top_prev[0] !== out13Add_top_expected_prev[0] )
		&& ((out13Add_top_expected_prev[0] !== last_out13Add_top_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out13Add_top[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out13Add_top_expected_prev);
		$display ("     Real value = %b", out13Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_out13Add_top_exp[0] = out13Add_top_expected_prev[0];
	end
	if (
		( out13Add_top_expected_prev[1] !== 1'bx ) && ( out13Add_top_prev[1] !== out13Add_top_expected_prev[1] )
		&& ((out13Add_top_expected_prev[1] !== last_out13Add_top_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out13Add_top[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out13Add_top_expected_prev);
		$display ("     Real value = %b", out13Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_out13Add_top_exp[1] = out13Add_top_expected_prev[1];
	end
	if (
		( out13Add_top_expected_prev[2] !== 1'bx ) && ( out13Add_top_prev[2] !== out13Add_top_expected_prev[2] )
		&& ((out13Add_top_expected_prev[2] !== last_out13Add_top_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out13Add_top[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out13Add_top_expected_prev);
		$display ("     Real value = %b", out13Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_out13Add_top_exp[2] = out13Add_top_expected_prev[2];
	end
	if (
		( out13Add_top_expected_prev[3] !== 1'bx ) && ( out13Add_top_prev[3] !== out13Add_top_expected_prev[3] )
		&& ((out13Add_top_expected_prev[3] !== last_out13Add_top_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out13Add_top[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out13Add_top_expected_prev);
		$display ("     Real value = %b", out13Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_out13Add_top_exp[3] = out13Add_top_expected_prev[3];
	end
	if (
		( out13Add_top_expected_prev[4] !== 1'bx ) && ( out13Add_top_prev[4] !== out13Add_top_expected_prev[4] )
		&& ((out13Add_top_expected_prev[4] !== last_out13Add_top_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out13Add_top[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out13Add_top_expected_prev);
		$display ("     Real value = %b", out13Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_out13Add_top_exp[4] = out13Add_top_expected_prev[4];
	end
	if (
		( out13Add_top_expected_prev[5] !== 1'bx ) && ( out13Add_top_prev[5] !== out13Add_top_expected_prev[5] )
		&& ((out13Add_top_expected_prev[5] !== last_out13Add_top_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out13Add_top[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out13Add_top_expected_prev);
		$display ("     Real value = %b", out13Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_out13Add_top_exp[5] = out13Add_top_expected_prev[5];
	end
	if (
		( out13Add_top_expected_prev[6] !== 1'bx ) && ( out13Add_top_prev[6] !== out13Add_top_expected_prev[6] )
		&& ((out13Add_top_expected_prev[6] !== last_out13Add_top_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out13Add_top[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out13Add_top_expected_prev);
		$display ("     Real value = %b", out13Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_out13Add_top_exp[6] = out13Add_top_expected_prev[6];
	end
	if (
		( out13Add_top_expected_prev[7] !== 1'bx ) && ( out13Add_top_prev[7] !== out13Add_top_expected_prev[7] )
		&& ((out13Add_top_expected_prev[7] !== last_out13Add_top_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out13Add_top[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out13Add_top_expected_prev);
		$display ("     Real value = %b", out13Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_out13Add_top_exp[7] = out13Add_top_expected_prev[7];
	end
	if (
		( out14Add_top_expected_prev[0] !== 1'bx ) && ( out14Add_top_prev[0] !== out14Add_top_expected_prev[0] )
		&& ((out14Add_top_expected_prev[0] !== last_out14Add_top_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out14Add_top[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out14Add_top_expected_prev);
		$display ("     Real value = %b", out14Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_out14Add_top_exp[0] = out14Add_top_expected_prev[0];
	end
	if (
		( out14Add_top_expected_prev[1] !== 1'bx ) && ( out14Add_top_prev[1] !== out14Add_top_expected_prev[1] )
		&& ((out14Add_top_expected_prev[1] !== last_out14Add_top_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out14Add_top[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out14Add_top_expected_prev);
		$display ("     Real value = %b", out14Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_out14Add_top_exp[1] = out14Add_top_expected_prev[1];
	end
	if (
		( out14Add_top_expected_prev[2] !== 1'bx ) && ( out14Add_top_prev[2] !== out14Add_top_expected_prev[2] )
		&& ((out14Add_top_expected_prev[2] !== last_out14Add_top_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out14Add_top[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out14Add_top_expected_prev);
		$display ("     Real value = %b", out14Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_out14Add_top_exp[2] = out14Add_top_expected_prev[2];
	end
	if (
		( out14Add_top_expected_prev[3] !== 1'bx ) && ( out14Add_top_prev[3] !== out14Add_top_expected_prev[3] )
		&& ((out14Add_top_expected_prev[3] !== last_out14Add_top_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out14Add_top[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out14Add_top_expected_prev);
		$display ("     Real value = %b", out14Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_out14Add_top_exp[3] = out14Add_top_expected_prev[3];
	end
	if (
		( out14Add_top_expected_prev[4] !== 1'bx ) && ( out14Add_top_prev[4] !== out14Add_top_expected_prev[4] )
		&& ((out14Add_top_expected_prev[4] !== last_out14Add_top_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out14Add_top[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out14Add_top_expected_prev);
		$display ("     Real value = %b", out14Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_out14Add_top_exp[4] = out14Add_top_expected_prev[4];
	end
	if (
		( out14Add_top_expected_prev[5] !== 1'bx ) && ( out14Add_top_prev[5] !== out14Add_top_expected_prev[5] )
		&& ((out14Add_top_expected_prev[5] !== last_out14Add_top_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out14Add_top[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out14Add_top_expected_prev);
		$display ("     Real value = %b", out14Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_out14Add_top_exp[5] = out14Add_top_expected_prev[5];
	end
	if (
		( out14Add_top_expected_prev[6] !== 1'bx ) && ( out14Add_top_prev[6] !== out14Add_top_expected_prev[6] )
		&& ((out14Add_top_expected_prev[6] !== last_out14Add_top_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out14Add_top[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out14Add_top_expected_prev);
		$display ("     Real value = %b", out14Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_out14Add_top_exp[6] = out14Add_top_expected_prev[6];
	end
	if (
		( out14Add_top_expected_prev[7] !== 1'bx ) && ( out14Add_top_prev[7] !== out14Add_top_expected_prev[7] )
		&& ((out14Add_top_expected_prev[7] !== last_out14Add_top_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out14Add_top[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out14Add_top_expected_prev);
		$display ("     Real value = %b", out14Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_out14Add_top_exp[7] = out14Add_top_expected_prev[7];
	end
	if (
		( out15Add_top_expected_prev[0] !== 1'bx ) && ( out15Add_top_prev[0] !== out15Add_top_expected_prev[0] )
		&& ((out15Add_top_expected_prev[0] !== last_out15Add_top_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out15Add_top[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out15Add_top_expected_prev);
		$display ("     Real value = %b", out15Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_out15Add_top_exp[0] = out15Add_top_expected_prev[0];
	end
	if (
		( out15Add_top_expected_prev[1] !== 1'bx ) && ( out15Add_top_prev[1] !== out15Add_top_expected_prev[1] )
		&& ((out15Add_top_expected_prev[1] !== last_out15Add_top_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out15Add_top[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out15Add_top_expected_prev);
		$display ("     Real value = %b", out15Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_out15Add_top_exp[1] = out15Add_top_expected_prev[1];
	end
	if (
		( out15Add_top_expected_prev[2] !== 1'bx ) && ( out15Add_top_prev[2] !== out15Add_top_expected_prev[2] )
		&& ((out15Add_top_expected_prev[2] !== last_out15Add_top_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out15Add_top[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out15Add_top_expected_prev);
		$display ("     Real value = %b", out15Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_out15Add_top_exp[2] = out15Add_top_expected_prev[2];
	end
	if (
		( out15Add_top_expected_prev[3] !== 1'bx ) && ( out15Add_top_prev[3] !== out15Add_top_expected_prev[3] )
		&& ((out15Add_top_expected_prev[3] !== last_out15Add_top_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out15Add_top[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out15Add_top_expected_prev);
		$display ("     Real value = %b", out15Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_out15Add_top_exp[3] = out15Add_top_expected_prev[3];
	end
	if (
		( out15Add_top_expected_prev[4] !== 1'bx ) && ( out15Add_top_prev[4] !== out15Add_top_expected_prev[4] )
		&& ((out15Add_top_expected_prev[4] !== last_out15Add_top_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out15Add_top[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out15Add_top_expected_prev);
		$display ("     Real value = %b", out15Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_out15Add_top_exp[4] = out15Add_top_expected_prev[4];
	end
	if (
		( out15Add_top_expected_prev[5] !== 1'bx ) && ( out15Add_top_prev[5] !== out15Add_top_expected_prev[5] )
		&& ((out15Add_top_expected_prev[5] !== last_out15Add_top_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out15Add_top[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out15Add_top_expected_prev);
		$display ("     Real value = %b", out15Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_out15Add_top_exp[5] = out15Add_top_expected_prev[5];
	end
	if (
		( out15Add_top_expected_prev[6] !== 1'bx ) && ( out15Add_top_prev[6] !== out15Add_top_expected_prev[6] )
		&& ((out15Add_top_expected_prev[6] !== last_out15Add_top_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out15Add_top[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out15Add_top_expected_prev);
		$display ("     Real value = %b", out15Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_out15Add_top_exp[6] = out15Add_top_expected_prev[6];
	end
	if (
		( out15Add_top_expected_prev[7] !== 1'bx ) && ( out15Add_top_prev[7] !== out15Add_top_expected_prev[7] )
		&& ((out15Add_top_expected_prev[7] !== last_out15Add_top_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out15Add_top[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out15Add_top_expected_prev);
		$display ("     Real value = %b", out15Add_top_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_out15Add_top_exp[7] = out15Add_top_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Conecta_topo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] entrada0_top;
reg [7:0] entrada1_top;
reg [7:0] entrada2_top;
reg [7:0] entrada3_top;
reg [7:0] entrada4_top;
reg [7:0] entrada5_top;
reg [7:0] entrada6_top;
reg [7:0] entrada7_top;
reg rst;
// wires                                               
wire [7:0] out0Add_top;
wire [7:0] out1Add_top;
wire [7:0] out2Add_top;
wire [7:0] out3Add_top;
wire [7:0] out4Add_top;
wire [7:0] out5Add_top;
wire [7:0] out6Add_top;
wire [7:0] out7Add_top;
wire [7:0] out8Add_top;
wire [7:0] out9Add_top;
wire [7:0] out10Add_top;
wire [7:0] out11Add_top;
wire [7:0] out12Add_top;
wire [7:0] out13Add_top;
wire [7:0] out14Add_top;
wire [7:0] out15Add_top;

wire sampler;                             

// assign statements (if any)                          
Conecta_topo i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.entrada0_top(entrada0_top),
	.entrada1_top(entrada1_top),
	.entrada2_top(entrada2_top),
	.entrada3_top(entrada3_top),
	.entrada4_top(entrada4_top),
	.entrada5_top(entrada5_top),
	.entrada6_top(entrada6_top),
	.entrada7_top(entrada7_top),
	.out0Add_top(out0Add_top),
	.out1Add_top(out1Add_top),
	.out2Add_top(out2Add_top),
	.out3Add_top(out3Add_top),
	.out4Add_top(out4Add_top),
	.out5Add_top(out5Add_top),
	.out6Add_top(out6Add_top),
	.out7Add_top(out7Add_top),
	.out8Add_top(out8Add_top),
	.out9Add_top(out9Add_top),
	.out10Add_top(out10Add_top),
	.out11Add_top(out11Add_top),
	.out12Add_top(out12Add_top),
	.out13Add_top(out13Add_top),
	.out14Add_top(out14Add_top),
	.out15Add_top(out15Add_top),
	.rst(rst)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// rst
initial
begin
	rst = 1'b1;
	rst = #40000 1'b0;
end 
// entrada0_top[ 7 ]
initial
begin
	entrada0_top[7] = 1'b0;
	entrada0_top[7] = #40000 1'bX;
	entrada0_top[7] = #60000 1'b0;
	entrada0_top[7] = #20000 1'bX;
	entrada0_top[7] = #20000 1'b0;
	entrada0_top[7] = #20000 1'bX;
	entrada0_top[7] = #20000 1'b0;
	entrada0_top[7] = #20000 1'bX;
end 
// entrada0_top[ 6 ]
initial
begin
	entrada0_top[6] = 1'b0;
	entrada0_top[6] = #40000 1'bX;
	entrada0_top[6] = #60000 1'b0;
	entrada0_top[6] = #20000 1'bX;
	entrada0_top[6] = #20000 1'b0;
	entrada0_top[6] = #20000 1'bX;
	entrada0_top[6] = #20000 1'b0;
	entrada0_top[6] = #20000 1'bX;
end 
// entrada0_top[ 5 ]
initial
begin
	entrada0_top[5] = 1'b0;
	entrada0_top[5] = #40000 1'bX;
	entrada0_top[5] = #60000 1'b0;
	entrada0_top[5] = #20000 1'bX;
	entrada0_top[5] = #20000 1'b0;
	entrada0_top[5] = #20000 1'bX;
	entrada0_top[5] = #20000 1'b1;
	entrada0_top[5] = #20000 1'bX;
end 
// entrada0_top[ 4 ]
initial
begin
	entrada0_top[4] = 1'b1;
	entrada0_top[4] = #40000 1'bX;
	entrada0_top[4] = #60000 1'b1;
	entrada0_top[4] = #20000 1'bX;
	entrada0_top[4] = #20000 1'b1;
	entrada0_top[4] = #20000 1'bX;
	entrada0_top[4] = #20000 1'b0;
	entrada0_top[4] = #20000 1'bX;
end 
// entrada0_top[ 3 ]
initial
begin
	entrada0_top[3] = 1'b1;
	entrada0_top[3] = #40000 1'bX;
	entrada0_top[3] = #60000 1'b1;
	entrada0_top[3] = #20000 1'bX;
	entrada0_top[3] = #20000 1'b0;
	entrada0_top[3] = #20000 1'bX;
	entrada0_top[3] = #20000 1'b0;
	entrada0_top[3] = #20000 1'bX;
end 
// entrada0_top[ 2 ]
initial
begin
	entrada0_top[2] = 1'b0;
	entrada0_top[2] = #40000 1'bX;
	entrada0_top[2] = #60000 1'b1;
	entrada0_top[2] = #20000 1'bX;
	entrada0_top[2] = #20000 1'b0;
	entrada0_top[2] = #20000 1'bX;
	entrada0_top[2] = #20000 1'b0;
	entrada0_top[2] = #20000 1'bX;
end 
// entrada0_top[ 1 ]
initial
begin
	entrada0_top[1] = 1'b1;
	entrada0_top[1] = #40000 1'bX;
	entrada0_top[1] = #60000 1'b0;
	entrada0_top[1] = #20000 1'bX;
	entrada0_top[1] = #20000 1'b0;
	entrada0_top[1] = #20000 1'bX;
	entrada0_top[1] = #20000 1'b0;
	entrada0_top[1] = #20000 1'bX;
end 
// entrada0_top[ 0 ]
initial
begin
	entrada0_top[0] = 1'b0;
	entrada0_top[0] = #40000 1'bX;
	entrada0_top[0] = #60000 1'b0;
	entrada0_top[0] = #20000 1'bX;
	entrada0_top[0] = #20000 1'b0;
	entrada0_top[0] = #20000 1'bX;
	entrada0_top[0] = #20000 1'b0;
	entrada0_top[0] = #20000 1'bX;
end 
// entrada1_top[ 7 ]
initial
begin
	entrada1_top[7] = 1'b0;
	entrada1_top[7] = #40000 1'bX;
	entrada1_top[7] = #60000 1'b0;
	entrada1_top[7] = #20000 1'bX;
	entrada1_top[7] = #20000 1'b0;
	entrada1_top[7] = #20000 1'bX;
	entrada1_top[7] = #20000 1'b0;
	entrada1_top[7] = #20000 1'bX;
end 
// entrada1_top[ 6 ]
initial
begin
	entrada1_top[6] = 1'b0;
	entrada1_top[6] = #40000 1'bX;
	entrada1_top[6] = #60000 1'b0;
	entrada1_top[6] = #20000 1'bX;
	entrada1_top[6] = #20000 1'b0;
	entrada1_top[6] = #20000 1'bX;
	entrada1_top[6] = #20000 1'b0;
	entrada1_top[6] = #20000 1'bX;
end 
// entrada1_top[ 5 ]
initial
begin
	entrada1_top[5] = 1'b0;
	entrada1_top[5] = #40000 1'bX;
	entrada1_top[5] = #60000 1'b0;
	entrada1_top[5] = #20000 1'bX;
	entrada1_top[5] = #20000 1'b0;
	entrada1_top[5] = #20000 1'bX;
	entrada1_top[5] = #20000 1'b1;
	entrada1_top[5] = #20000 1'bX;
end 
// entrada1_top[ 4 ]
initial
begin
	entrada1_top[4] = 1'b1;
	entrada1_top[4] = #40000 1'bX;
	entrada1_top[4] = #60000 1'b1;
	entrada1_top[4] = #20000 1'bX;
	entrada1_top[4] = #20000 1'b1;
	entrada1_top[4] = #20000 1'bX;
	entrada1_top[4] = #20000 1'b0;
	entrada1_top[4] = #20000 1'bX;
end 
// entrada1_top[ 3 ]
initial
begin
	entrada1_top[3] = 1'b1;
	entrada1_top[3] = #40000 1'bX;
	entrada1_top[3] = #60000 1'b1;
	entrada1_top[3] = #20000 1'bX;
	entrada1_top[3] = #20000 1'b0;
	entrada1_top[3] = #20000 1'bX;
	entrada1_top[3] = #20000 1'b0;
	entrada1_top[3] = #20000 1'bX;
end 
// entrada1_top[ 2 ]
initial
begin
	entrada1_top[2] = 1'b0;
	entrada1_top[2] = #40000 1'bX;
	entrada1_top[2] = #60000 1'b1;
	entrada1_top[2] = #20000 1'bX;
	entrada1_top[2] = #20000 1'b0;
	entrada1_top[2] = #20000 1'bX;
	entrada1_top[2] = #20000 1'b0;
	entrada1_top[2] = #20000 1'bX;
end 
// entrada1_top[ 1 ]
initial
begin
	entrada1_top[1] = 1'b1;
	entrada1_top[1] = #40000 1'bX;
	entrada1_top[1] = #60000 1'b0;
	entrada1_top[1] = #20000 1'bX;
	entrada1_top[1] = #20000 1'b0;
	entrada1_top[1] = #20000 1'bX;
	entrada1_top[1] = #20000 1'b0;
	entrada1_top[1] = #20000 1'bX;
end 
// entrada1_top[ 0 ]
initial
begin
	entrada1_top[0] = 1'b0;
	entrada1_top[0] = #40000 1'bX;
	entrada1_top[0] = #60000 1'b0;
	entrada1_top[0] = #20000 1'bX;
	entrada1_top[0] = #20000 1'b0;
	entrada1_top[0] = #20000 1'bX;
	entrada1_top[0] = #20000 1'b0;
	entrada1_top[0] = #20000 1'bX;
end 
// entrada2_top[ 7 ]
initial
begin
	entrada2_top[7] = 1'b0;
	entrada2_top[7] = #40000 1'bX;
	entrada2_top[7] = #60000 1'b0;
	entrada2_top[7] = #20000 1'bX;
	entrada2_top[7] = #20000 1'b0;
	entrada2_top[7] = #20000 1'bX;
	entrada2_top[7] = #20000 1'b0;
	entrada2_top[7] = #20000 1'bX;
end 
// entrada2_top[ 6 ]
initial
begin
	entrada2_top[6] = 1'b0;
	entrada2_top[6] = #40000 1'bX;
	entrada2_top[6] = #60000 1'b0;
	entrada2_top[6] = #20000 1'bX;
	entrada2_top[6] = #20000 1'b0;
	entrada2_top[6] = #20000 1'bX;
	entrada2_top[6] = #20000 1'b0;
	entrada2_top[6] = #20000 1'bX;
end 
// entrada2_top[ 5 ]
initial
begin
	entrada2_top[5] = 1'b0;
	entrada2_top[5] = #40000 1'bX;
	entrada2_top[5] = #60000 1'b0;
	entrada2_top[5] = #20000 1'bX;
	entrada2_top[5] = #20000 1'b0;
	entrada2_top[5] = #20000 1'bX;
	entrada2_top[5] = #20000 1'b1;
	entrada2_top[5] = #20000 1'bX;
end 
// entrada2_top[ 4 ]
initial
begin
	entrada2_top[4] = 1'b1;
	entrada2_top[4] = #40000 1'bX;
	entrada2_top[4] = #60000 1'b1;
	entrada2_top[4] = #20000 1'bX;
	entrada2_top[4] = #20000 1'b1;
	entrada2_top[4] = #20000 1'bX;
	entrada2_top[4] = #20000 1'b0;
	entrada2_top[4] = #20000 1'bX;
end 
// entrada2_top[ 3 ]
initial
begin
	entrada2_top[3] = 1'b1;
	entrada2_top[3] = #40000 1'bX;
	entrada2_top[3] = #60000 1'b1;
	entrada2_top[3] = #20000 1'bX;
	entrada2_top[3] = #20000 1'b0;
	entrada2_top[3] = #20000 1'bX;
	entrada2_top[3] = #20000 1'b0;
	entrada2_top[3] = #20000 1'bX;
end 
// entrada2_top[ 2 ]
initial
begin
	entrada2_top[2] = 1'b0;
	entrada2_top[2] = #40000 1'bX;
	entrada2_top[2] = #60000 1'b1;
	entrada2_top[2] = #20000 1'bX;
	entrada2_top[2] = #20000 1'b0;
	entrada2_top[2] = #20000 1'bX;
	entrada2_top[2] = #20000 1'b0;
	entrada2_top[2] = #20000 1'bX;
end 
// entrada2_top[ 1 ]
initial
begin
	entrada2_top[1] = 1'b1;
	entrada2_top[1] = #40000 1'bX;
	entrada2_top[1] = #60000 1'b0;
	entrada2_top[1] = #20000 1'bX;
	entrada2_top[1] = #20000 1'b0;
	entrada2_top[1] = #20000 1'bX;
	entrada2_top[1] = #20000 1'b0;
	entrada2_top[1] = #20000 1'bX;
end 
// entrada2_top[ 0 ]
initial
begin
	entrada2_top[0] = 1'b0;
	entrada2_top[0] = #40000 1'bX;
	entrada2_top[0] = #60000 1'b0;
	entrada2_top[0] = #20000 1'bX;
	entrada2_top[0] = #20000 1'b0;
	entrada2_top[0] = #20000 1'bX;
	entrada2_top[0] = #20000 1'b0;
	entrada2_top[0] = #20000 1'bX;
end 
// entrada3_top[ 7 ]
initial
begin
	entrada3_top[7] = 1'b0;
	entrada3_top[7] = #40000 1'bX;
	entrada3_top[7] = #60000 1'b0;
	entrada3_top[7] = #20000 1'bX;
	entrada3_top[7] = #20000 1'b0;
	entrada3_top[7] = #20000 1'bX;
	entrada3_top[7] = #20000 1'b0;
	entrada3_top[7] = #20000 1'bX;
end 
// entrada3_top[ 6 ]
initial
begin
	entrada3_top[6] = 1'b0;
	entrada3_top[6] = #40000 1'bX;
	entrada3_top[6] = #60000 1'b0;
	entrada3_top[6] = #20000 1'bX;
	entrada3_top[6] = #20000 1'b0;
	entrada3_top[6] = #20000 1'bX;
	entrada3_top[6] = #20000 1'b0;
	entrada3_top[6] = #20000 1'bX;
end 
// entrada3_top[ 5 ]
initial
begin
	entrada3_top[5] = 1'b0;
	entrada3_top[5] = #40000 1'bX;
	entrada3_top[5] = #60000 1'b0;
	entrada3_top[5] = #20000 1'bX;
	entrada3_top[5] = #20000 1'b0;
	entrada3_top[5] = #20000 1'bX;
	entrada3_top[5] = #20000 1'b1;
	entrada3_top[5] = #20000 1'bX;
end 
// entrada3_top[ 4 ]
initial
begin
	entrada3_top[4] = 1'b1;
	entrada3_top[4] = #40000 1'bX;
	entrada3_top[4] = #60000 1'b1;
	entrada3_top[4] = #20000 1'bX;
	entrada3_top[4] = #20000 1'b1;
	entrada3_top[4] = #20000 1'bX;
	entrada3_top[4] = #20000 1'b0;
	entrada3_top[4] = #20000 1'bX;
end 
// entrada3_top[ 3 ]
initial
begin
	entrada3_top[3] = 1'b1;
	entrada3_top[3] = #40000 1'bX;
	entrada3_top[3] = #60000 1'b1;
	entrada3_top[3] = #20000 1'bX;
	entrada3_top[3] = #20000 1'b0;
	entrada3_top[3] = #20000 1'bX;
	entrada3_top[3] = #20000 1'b0;
	entrada3_top[3] = #20000 1'bX;
end 
// entrada3_top[ 2 ]
initial
begin
	entrada3_top[2] = 1'b0;
	entrada3_top[2] = #40000 1'bX;
	entrada3_top[2] = #60000 1'b1;
	entrada3_top[2] = #20000 1'bX;
	entrada3_top[2] = #20000 1'b0;
	entrada3_top[2] = #20000 1'bX;
	entrada3_top[2] = #20000 1'b0;
	entrada3_top[2] = #20000 1'bX;
end 
// entrada3_top[ 1 ]
initial
begin
	entrada3_top[1] = 1'b1;
	entrada3_top[1] = #40000 1'bX;
	entrada3_top[1] = #60000 1'b0;
	entrada3_top[1] = #20000 1'bX;
	entrada3_top[1] = #20000 1'b0;
	entrada3_top[1] = #20000 1'bX;
	entrada3_top[1] = #20000 1'b0;
	entrada3_top[1] = #20000 1'bX;
end 
// entrada3_top[ 0 ]
initial
begin
	entrada3_top[0] = 1'b0;
	entrada3_top[0] = #40000 1'bX;
	entrada3_top[0] = #60000 1'b0;
	entrada3_top[0] = #20000 1'bX;
	entrada3_top[0] = #20000 1'b0;
	entrada3_top[0] = #20000 1'bX;
	entrada3_top[0] = #20000 1'b0;
	entrada3_top[0] = #20000 1'bX;
end 
// entrada4_top[ 7 ]
initial
begin
	entrada4_top[7] = 1'b0;
	entrada4_top[7] = #40000 1'bX;
	entrada4_top[7] = #60000 1'b0;
	entrada4_top[7] = #20000 1'bX;
	entrada4_top[7] = #20000 1'b0;
	entrada4_top[7] = #20000 1'bX;
	entrada4_top[7] = #20000 1'b0;
	entrada4_top[7] = #20000 1'bX;
end 
// entrada4_top[ 6 ]
initial
begin
	entrada4_top[6] = 1'b0;
	entrada4_top[6] = #40000 1'bX;
	entrada4_top[6] = #60000 1'b0;
	entrada4_top[6] = #20000 1'bX;
	entrada4_top[6] = #20000 1'b0;
	entrada4_top[6] = #20000 1'bX;
	entrada4_top[6] = #20000 1'b0;
	entrada4_top[6] = #20000 1'bX;
end 
// entrada4_top[ 5 ]
initial
begin
	entrada4_top[5] = 1'b0;
	entrada4_top[5] = #40000 1'bX;
	entrada4_top[5] = #60000 1'b0;
	entrada4_top[5] = #20000 1'bX;
	entrada4_top[5] = #20000 1'b0;
	entrada4_top[5] = #20000 1'bX;
	entrada4_top[5] = #20000 1'b1;
	entrada4_top[5] = #20000 1'bX;
end 
// entrada4_top[ 4 ]
initial
begin
	entrada4_top[4] = 1'b1;
	entrada4_top[4] = #40000 1'bX;
	entrada4_top[4] = #60000 1'b1;
	entrada4_top[4] = #20000 1'bX;
	entrada4_top[4] = #20000 1'b1;
	entrada4_top[4] = #20000 1'bX;
	entrada4_top[4] = #20000 1'b0;
	entrada4_top[4] = #20000 1'bX;
end 
// entrada4_top[ 3 ]
initial
begin
	entrada4_top[3] = 1'b1;
	entrada4_top[3] = #40000 1'bX;
	entrada4_top[3] = #60000 1'b1;
	entrada4_top[3] = #20000 1'bX;
	entrada4_top[3] = #20000 1'b0;
	entrada4_top[3] = #20000 1'bX;
	entrada4_top[3] = #20000 1'b0;
	entrada4_top[3] = #20000 1'bX;
end 
// entrada4_top[ 2 ]
initial
begin
	entrada4_top[2] = 1'b0;
	entrada4_top[2] = #40000 1'bX;
	entrada4_top[2] = #60000 1'b1;
	entrada4_top[2] = #20000 1'bX;
	entrada4_top[2] = #20000 1'b0;
	entrada4_top[2] = #20000 1'bX;
	entrada4_top[2] = #20000 1'b0;
	entrada4_top[2] = #20000 1'bX;
end 
// entrada4_top[ 1 ]
initial
begin
	entrada4_top[1] = 1'b1;
	entrada4_top[1] = #40000 1'bX;
	entrada4_top[1] = #60000 1'b0;
	entrada4_top[1] = #20000 1'bX;
	entrada4_top[1] = #20000 1'b0;
	entrada4_top[1] = #20000 1'bX;
	entrada4_top[1] = #20000 1'b0;
	entrada4_top[1] = #20000 1'bX;
end 
// entrada4_top[ 0 ]
initial
begin
	entrada4_top[0] = 1'b0;
	entrada4_top[0] = #40000 1'bX;
	entrada4_top[0] = #60000 1'b0;
	entrada4_top[0] = #20000 1'bX;
	entrada4_top[0] = #20000 1'b0;
	entrada4_top[0] = #20000 1'bX;
	entrada4_top[0] = #20000 1'b0;
	entrada4_top[0] = #20000 1'bX;
end 
// entrada5_top[ 7 ]
initial
begin
	entrada5_top[7] = 1'b0;
	entrada5_top[7] = #40000 1'bX;
	entrada5_top[7] = #60000 1'b0;
	entrada5_top[7] = #20000 1'bX;
	entrada5_top[7] = #20000 1'b0;
	entrada5_top[7] = #20000 1'bX;
	entrada5_top[7] = #20000 1'b0;
	entrada5_top[7] = #20000 1'bX;
end 
// entrada5_top[ 6 ]
initial
begin
	entrada5_top[6] = 1'b0;
	entrada5_top[6] = #40000 1'bX;
	entrada5_top[6] = #60000 1'b0;
	entrada5_top[6] = #20000 1'bX;
	entrada5_top[6] = #20000 1'b0;
	entrada5_top[6] = #20000 1'bX;
	entrada5_top[6] = #20000 1'b0;
	entrada5_top[6] = #20000 1'bX;
end 
// entrada5_top[ 5 ]
initial
begin
	entrada5_top[5] = 1'b0;
	entrada5_top[5] = #40000 1'bX;
	entrada5_top[5] = #60000 1'b0;
	entrada5_top[5] = #20000 1'bX;
	entrada5_top[5] = #20000 1'b0;
	entrada5_top[5] = #20000 1'bX;
	entrada5_top[5] = #20000 1'b1;
	entrada5_top[5] = #20000 1'bX;
end 
// entrada5_top[ 4 ]
initial
begin
	entrada5_top[4] = 1'b1;
	entrada5_top[4] = #40000 1'bX;
	entrada5_top[4] = #60000 1'b1;
	entrada5_top[4] = #20000 1'bX;
	entrada5_top[4] = #20000 1'b1;
	entrada5_top[4] = #20000 1'bX;
	entrada5_top[4] = #20000 1'b0;
	entrada5_top[4] = #20000 1'bX;
end 
// entrada5_top[ 3 ]
initial
begin
	entrada5_top[3] = 1'b1;
	entrada5_top[3] = #40000 1'bX;
	entrada5_top[3] = #60000 1'b1;
	entrada5_top[3] = #20000 1'bX;
	entrada5_top[3] = #20000 1'b0;
	entrada5_top[3] = #20000 1'bX;
	entrada5_top[3] = #20000 1'b0;
	entrada5_top[3] = #20000 1'bX;
end 
// entrada5_top[ 2 ]
initial
begin
	entrada5_top[2] = 1'b0;
	entrada5_top[2] = #40000 1'bX;
	entrada5_top[2] = #60000 1'b1;
	entrada5_top[2] = #20000 1'bX;
	entrada5_top[2] = #20000 1'b0;
	entrada5_top[2] = #20000 1'bX;
	entrada5_top[2] = #20000 1'b0;
	entrada5_top[2] = #20000 1'bX;
end 
// entrada5_top[ 1 ]
initial
begin
	entrada5_top[1] = 1'b1;
	entrada5_top[1] = #40000 1'bX;
	entrada5_top[1] = #60000 1'b0;
	entrada5_top[1] = #20000 1'bX;
	entrada5_top[1] = #20000 1'b0;
	entrada5_top[1] = #20000 1'bX;
	entrada5_top[1] = #20000 1'b0;
	entrada5_top[1] = #20000 1'bX;
end 
// entrada5_top[ 0 ]
initial
begin
	entrada5_top[0] = 1'b0;
	entrada5_top[0] = #40000 1'bX;
	entrada5_top[0] = #60000 1'b0;
	entrada5_top[0] = #20000 1'bX;
	entrada5_top[0] = #20000 1'b0;
	entrada5_top[0] = #20000 1'bX;
	entrada5_top[0] = #20000 1'b0;
	entrada5_top[0] = #20000 1'bX;
end 
// entrada6_top[ 7 ]
initial
begin
	entrada6_top[7] = 1'b0;
	entrada6_top[7] = #40000 1'bX;
	entrada6_top[7] = #60000 1'b0;
	entrada6_top[7] = #20000 1'bX;
	entrada6_top[7] = #20000 1'b0;
	entrada6_top[7] = #20000 1'bX;
	entrada6_top[7] = #20000 1'b0;
	entrada6_top[7] = #20000 1'bX;
end 
// entrada6_top[ 6 ]
initial
begin
	entrada6_top[6] = 1'b0;
	entrada6_top[6] = #40000 1'bX;
	entrada6_top[6] = #60000 1'b0;
	entrada6_top[6] = #20000 1'bX;
	entrada6_top[6] = #20000 1'b0;
	entrada6_top[6] = #20000 1'bX;
	entrada6_top[6] = #20000 1'b0;
	entrada6_top[6] = #20000 1'bX;
end 
// entrada6_top[ 5 ]
initial
begin
	entrada6_top[5] = 1'b0;
	entrada6_top[5] = #40000 1'bX;
	entrada6_top[5] = #60000 1'b0;
	entrada6_top[5] = #20000 1'bX;
	entrada6_top[5] = #20000 1'b0;
	entrada6_top[5] = #20000 1'bX;
	entrada6_top[5] = #20000 1'b1;
	entrada6_top[5] = #20000 1'bX;
end 
// entrada6_top[ 4 ]
initial
begin
	entrada6_top[4] = 1'b1;
	entrada6_top[4] = #40000 1'bX;
	entrada6_top[4] = #60000 1'b1;
	entrada6_top[4] = #20000 1'bX;
	entrada6_top[4] = #20000 1'b1;
	entrada6_top[4] = #20000 1'bX;
	entrada6_top[4] = #20000 1'b0;
	entrada6_top[4] = #20000 1'bX;
end 
// entrada6_top[ 3 ]
initial
begin
	entrada6_top[3] = 1'b1;
	entrada6_top[3] = #40000 1'bX;
	entrada6_top[3] = #60000 1'b1;
	entrada6_top[3] = #20000 1'bX;
	entrada6_top[3] = #20000 1'b0;
	entrada6_top[3] = #20000 1'bX;
	entrada6_top[3] = #20000 1'b0;
	entrada6_top[3] = #20000 1'bX;
end 
// entrada6_top[ 2 ]
initial
begin
	entrada6_top[2] = 1'b0;
	entrada6_top[2] = #40000 1'bX;
	entrada6_top[2] = #60000 1'b1;
	entrada6_top[2] = #20000 1'bX;
	entrada6_top[2] = #20000 1'b0;
	entrada6_top[2] = #20000 1'bX;
	entrada6_top[2] = #20000 1'b0;
	entrada6_top[2] = #20000 1'bX;
end 
// entrada6_top[ 1 ]
initial
begin
	entrada6_top[1] = 1'b1;
	entrada6_top[1] = #40000 1'bX;
	entrada6_top[1] = #60000 1'b0;
	entrada6_top[1] = #20000 1'bX;
	entrada6_top[1] = #20000 1'b0;
	entrada6_top[1] = #20000 1'bX;
	entrada6_top[1] = #20000 1'b0;
	entrada6_top[1] = #20000 1'bX;
end 
// entrada6_top[ 0 ]
initial
begin
	entrada6_top[0] = 1'b0;
	entrada6_top[0] = #40000 1'bX;
	entrada6_top[0] = #60000 1'b0;
	entrada6_top[0] = #20000 1'bX;
	entrada6_top[0] = #20000 1'b0;
	entrada6_top[0] = #20000 1'bX;
	entrada6_top[0] = #20000 1'b0;
	entrada6_top[0] = #20000 1'bX;
end 
// entrada7_top[ 7 ]
initial
begin
	entrada7_top[7] = 1'b0;
	entrada7_top[7] = #40000 1'bX;
	entrada7_top[7] = #60000 1'b0;
	entrada7_top[7] = #20000 1'bX;
	entrada7_top[7] = #20000 1'b0;
	entrada7_top[7] = #20000 1'bX;
	entrada7_top[7] = #20000 1'b0;
	entrada7_top[7] = #20000 1'bX;
end 
// entrada7_top[ 6 ]
initial
begin
	entrada7_top[6] = 1'b0;
	entrada7_top[6] = #40000 1'bX;
	entrada7_top[6] = #60000 1'b0;
	entrada7_top[6] = #20000 1'bX;
	entrada7_top[6] = #20000 1'b0;
	entrada7_top[6] = #20000 1'bX;
	entrada7_top[6] = #20000 1'b0;
	entrada7_top[6] = #20000 1'bX;
end 
// entrada7_top[ 5 ]
initial
begin
	entrada7_top[5] = 1'b0;
	entrada7_top[5] = #40000 1'bX;
	entrada7_top[5] = #60000 1'b0;
	entrada7_top[5] = #20000 1'bX;
	entrada7_top[5] = #20000 1'b0;
	entrada7_top[5] = #20000 1'bX;
	entrada7_top[5] = #20000 1'b1;
	entrada7_top[5] = #20000 1'bX;
end 
// entrada7_top[ 4 ]
initial
begin
	entrada7_top[4] = 1'b1;
	entrada7_top[4] = #40000 1'bX;
	entrada7_top[4] = #60000 1'b1;
	entrada7_top[4] = #20000 1'bX;
	entrada7_top[4] = #20000 1'b1;
	entrada7_top[4] = #20000 1'bX;
	entrada7_top[4] = #20000 1'b0;
	entrada7_top[4] = #20000 1'bX;
end 
// entrada7_top[ 3 ]
initial
begin
	entrada7_top[3] = 1'b1;
	entrada7_top[3] = #40000 1'bX;
	entrada7_top[3] = #60000 1'b1;
	entrada7_top[3] = #20000 1'bX;
	entrada7_top[3] = #20000 1'b0;
	entrada7_top[3] = #20000 1'bX;
	entrada7_top[3] = #20000 1'b0;
	entrada7_top[3] = #20000 1'bX;
end 
// entrada7_top[ 2 ]
initial
begin
	entrada7_top[2] = 1'b0;
	entrada7_top[2] = #40000 1'bX;
	entrada7_top[2] = #60000 1'b1;
	entrada7_top[2] = #20000 1'bX;
	entrada7_top[2] = #20000 1'b0;
	entrada7_top[2] = #20000 1'bX;
	entrada7_top[2] = #20000 1'b0;
	entrada7_top[2] = #20000 1'bX;
end 
// entrada7_top[ 1 ]
initial
begin
	entrada7_top[1] = 1'b1;
	entrada7_top[1] = #40000 1'bX;
	entrada7_top[1] = #60000 1'b0;
	entrada7_top[1] = #20000 1'bX;
	entrada7_top[1] = #20000 1'b0;
	entrada7_top[1] = #20000 1'bX;
	entrada7_top[1] = #20000 1'b0;
	entrada7_top[1] = #20000 1'bX;
end 
// entrada7_top[ 0 ]
initial
begin
	entrada7_top[0] = 1'b0;
	entrada7_top[0] = #40000 1'bX;
	entrada7_top[0] = #60000 1'b0;
	entrada7_top[0] = #20000 1'bX;
	entrada7_top[0] = #20000 1'b0;
	entrada7_top[0] = #20000 1'bX;
	entrada7_top[0] = #20000 1'b0;
	entrada7_top[0] = #20000 1'bX;
end 

Conecta_topo_vlg_sample_tst tb_sample (
	.clk(clk),
	.entrada0_top(entrada0_top),
	.entrada1_top(entrada1_top),
	.entrada2_top(entrada2_top),
	.entrada3_top(entrada3_top),
	.entrada4_top(entrada4_top),
	.entrada5_top(entrada5_top),
	.entrada6_top(entrada6_top),
	.entrada7_top(entrada7_top),
	.rst(rst),
	.sampler_tx(sampler)
);

Conecta_topo_vlg_check_tst tb_out(
	.out0Add_top(out0Add_top),
	.out1Add_top(out1Add_top),
	.out2Add_top(out2Add_top),
	.out3Add_top(out3Add_top),
	.out4Add_top(out4Add_top),
	.out5Add_top(out5Add_top),
	.out6Add_top(out6Add_top),
	.out7Add_top(out7Add_top),
	.out8Add_top(out8Add_top),
	.out9Add_top(out9Add_top),
	.out10Add_top(out10Add_top),
	.out11Add_top(out11Add_top),
	.out12Add_top(out12Add_top),
	.out13Add_top(out13Add_top),
	.out14Add_top(out14Add_top),
	.out15Add_top(out15Add_top),
	.sampler_rx(sampler)
);
endmodule

