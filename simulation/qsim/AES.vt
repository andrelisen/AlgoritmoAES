// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/29/2019 20:59:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    SubChave
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SubChave_vlg_sample_tst(
	c0,
	c1,
	c2,
	c3,
	c4,
	c5,
	c6,
	c7,
	c8,
	c9,
	c10,
	c11,
	c12,
	c13,
	c14,
	c15,
	seletor,
	sampler_tx
);
input [7:0] c0;
input [7:0] c1;
input [7:0] c2;
input [7:0] c3;
input [7:0] c4;
input [7:0] c5;
input [7:0] c6;
input [7:0] c7;
input [7:0] c8;
input [7:0] c9;
input [7:0] c10;
input [7:0] c11;
input [7:0] c12;
input [7:0] c13;
input [7:0] c14;
input [7:0] c15;
input [3:0] seletor;
output sampler_tx;

reg sample;
time current_time;
always @(c0 or c1 or c2 or c3 or c4 or c5 or c6 or c7 or c8 or c9 or c10 or c11 or c12 or c13 or c14 or c15 or seletor)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module SubChave_vlg_check_tst (
	n0,
	n1,
	n2,
	n3,
	n4,
	n5,
	n6,
	n7,
	n8,
	n9,
	n10,
	n11,
	n12,
	n13,
	n14,
	n15,
	sampler_rx
);
input [7:0] n0;
input [7:0] n1;
input [7:0] n2;
input [7:0] n3;
input [7:0] n4;
input [7:0] n5;
input [7:0] n6;
input [7:0] n7;
input [7:0] n8;
input [7:0] n9;
input [7:0] n10;
input [7:0] n11;
input [7:0] n12;
input [7:0] n13;
input [7:0] n14;
input [7:0] n15;
input sampler_rx;

reg [7:0] n0_expected;
reg [7:0] n1_expected;
reg [7:0] n2_expected;
reg [7:0] n3_expected;
reg [7:0] n4_expected;
reg [7:0] n5_expected;
reg [7:0] n6_expected;
reg [7:0] n7_expected;
reg [7:0] n8_expected;
reg [7:0] n9_expected;
reg [7:0] n10_expected;
reg [7:0] n11_expected;
reg [7:0] n12_expected;
reg [7:0] n13_expected;
reg [7:0] n14_expected;
reg [7:0] n15_expected;

reg [7:0] n0_prev;
reg [7:0] n1_prev;
reg [7:0] n2_prev;
reg [7:0] n3_prev;
reg [7:0] n4_prev;
reg [7:0] n5_prev;
reg [7:0] n6_prev;
reg [7:0] n7_prev;
reg [7:0] n8_prev;
reg [7:0] n9_prev;
reg [7:0] n10_prev;
reg [7:0] n11_prev;
reg [7:0] n12_prev;
reg [7:0] n13_prev;
reg [7:0] n14_prev;
reg [7:0] n15_prev;

reg [7:0] n0_expected_prev;
reg [7:0] n1_expected_prev;
reg [7:0] n2_expected_prev;
reg [7:0] n3_expected_prev;
reg [7:0] n4_expected_prev;
reg [7:0] n5_expected_prev;
reg [7:0] n6_expected_prev;
reg [7:0] n7_expected_prev;
reg [7:0] n8_expected_prev;
reg [7:0] n9_expected_prev;
reg [7:0] n10_expected_prev;
reg [7:0] n11_expected_prev;
reg [7:0] n12_expected_prev;
reg [7:0] n13_expected_prev;
reg [7:0] n14_expected_prev;
reg [7:0] n15_expected_prev;

reg [7:0] last_n0_exp;
reg [7:0] last_n1_exp;
reg [7:0] last_n2_exp;
reg [7:0] last_n3_exp;
reg [7:0] last_n4_exp;
reg [7:0] last_n5_exp;
reg [7:0] last_n6_exp;
reg [7:0] last_n7_exp;
reg [7:0] last_n8_exp;
reg [7:0] last_n9_exp;
reg [7:0] last_n10_exp;
reg [7:0] last_n11_exp;
reg [7:0] last_n12_exp;
reg [7:0] last_n13_exp;
reg [7:0] last_n14_exp;
reg [7:0] last_n15_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	n0_prev = n0;
	n1_prev = n1;
	n2_prev = n2;
	n3_prev = n3;
	n4_prev = n4;
	n5_prev = n5;
	n6_prev = n6;
	n7_prev = n7;
	n8_prev = n8;
	n9_prev = n9;
	n10_prev = n10;
	n11_prev = n11;
	n12_prev = n12;
	n13_prev = n13;
	n14_prev = n14;
	n15_prev = n15;
end

// update expected /o prevs

always @(trigger)
begin
	n0_expected_prev = n0_expected;
	n1_expected_prev = n1_expected;
	n2_expected_prev = n2_expected;
	n3_expected_prev = n3_expected;
	n4_expected_prev = n4_expected;
	n5_expected_prev = n5_expected;
	n6_expected_prev = n6_expected;
	n7_expected_prev = n7_expected;
	n8_expected_prev = n8_expected;
	n9_expected_prev = n9_expected;
	n10_expected_prev = n10_expected;
	n11_expected_prev = n11_expected;
	n12_expected_prev = n12_expected;
	n13_expected_prev = n13_expected;
	n14_expected_prev = n14_expected;
	n15_expected_prev = n15_expected;
end


// expected n0[ 7 ]
initial
begin
	n0_expected[7] = 1'bX;
end 
// expected n0[ 6 ]
initial
begin
	n0_expected[6] = 1'bX;
end 
// expected n0[ 5 ]
initial
begin
	n0_expected[5] = 1'bX;
end 
// expected n0[ 4 ]
initial
begin
	n0_expected[4] = 1'bX;
end 
// expected n0[ 3 ]
initial
begin
	n0_expected[3] = 1'bX;
end 
// expected n0[ 2 ]
initial
begin
	n0_expected[2] = 1'bX;
end 
// expected n0[ 1 ]
initial
begin
	n0_expected[1] = 1'bX;
end 
// expected n0[ 0 ]
initial
begin
	n0_expected[0] = 1'bX;
end 
// expected n1[ 7 ]
initial
begin
	n1_expected[7] = 1'bX;
end 
// expected n1[ 6 ]
initial
begin
	n1_expected[6] = 1'bX;
end 
// expected n1[ 5 ]
initial
begin
	n1_expected[5] = 1'bX;
end 
// expected n1[ 4 ]
initial
begin
	n1_expected[4] = 1'bX;
end 
// expected n1[ 3 ]
initial
begin
	n1_expected[3] = 1'bX;
end 
// expected n1[ 2 ]
initial
begin
	n1_expected[2] = 1'bX;
end 
// expected n1[ 1 ]
initial
begin
	n1_expected[1] = 1'bX;
end 
// expected n1[ 0 ]
initial
begin
	n1_expected[0] = 1'bX;
end 
// expected n2[ 7 ]
initial
begin
	n2_expected[7] = 1'bX;
end 
// expected n2[ 6 ]
initial
begin
	n2_expected[6] = 1'bX;
end 
// expected n2[ 5 ]
initial
begin
	n2_expected[5] = 1'bX;
end 
// expected n2[ 4 ]
initial
begin
	n2_expected[4] = 1'bX;
end 
// expected n2[ 3 ]
initial
begin
	n2_expected[3] = 1'bX;
end 
// expected n2[ 2 ]
initial
begin
	n2_expected[2] = 1'bX;
end 
// expected n2[ 1 ]
initial
begin
	n2_expected[1] = 1'bX;
end 
// expected n2[ 0 ]
initial
begin
	n2_expected[0] = 1'bX;
end 
// expected n3[ 7 ]
initial
begin
	n3_expected[7] = 1'bX;
end 
// expected n3[ 6 ]
initial
begin
	n3_expected[6] = 1'bX;
end 
// expected n3[ 5 ]
initial
begin
	n3_expected[5] = 1'bX;
end 
// expected n3[ 4 ]
initial
begin
	n3_expected[4] = 1'bX;
end 
// expected n3[ 3 ]
initial
begin
	n3_expected[3] = 1'bX;
end 
// expected n3[ 2 ]
initial
begin
	n3_expected[2] = 1'bX;
end 
// expected n3[ 1 ]
initial
begin
	n3_expected[1] = 1'bX;
end 
// expected n3[ 0 ]
initial
begin
	n3_expected[0] = 1'bX;
end 
// expected n4[ 7 ]
initial
begin
	n4_expected[7] = 1'bX;
end 
// expected n4[ 6 ]
initial
begin
	n4_expected[6] = 1'bX;
end 
// expected n4[ 5 ]
initial
begin
	n4_expected[5] = 1'bX;
end 
// expected n4[ 4 ]
initial
begin
	n4_expected[4] = 1'bX;
end 
// expected n4[ 3 ]
initial
begin
	n4_expected[3] = 1'bX;
end 
// expected n4[ 2 ]
initial
begin
	n4_expected[2] = 1'bX;
end 
// expected n4[ 1 ]
initial
begin
	n4_expected[1] = 1'bX;
end 
// expected n4[ 0 ]
initial
begin
	n4_expected[0] = 1'bX;
end 
// expected n5[ 7 ]
initial
begin
	n5_expected[7] = 1'bX;
end 
// expected n5[ 6 ]
initial
begin
	n5_expected[6] = 1'bX;
end 
// expected n5[ 5 ]
initial
begin
	n5_expected[5] = 1'bX;
end 
// expected n5[ 4 ]
initial
begin
	n5_expected[4] = 1'bX;
end 
// expected n5[ 3 ]
initial
begin
	n5_expected[3] = 1'bX;
end 
// expected n5[ 2 ]
initial
begin
	n5_expected[2] = 1'bX;
end 
// expected n5[ 1 ]
initial
begin
	n5_expected[1] = 1'bX;
end 
// expected n5[ 0 ]
initial
begin
	n5_expected[0] = 1'bX;
end 
// expected n6[ 7 ]
initial
begin
	n6_expected[7] = 1'bX;
end 
// expected n6[ 6 ]
initial
begin
	n6_expected[6] = 1'bX;
end 
// expected n6[ 5 ]
initial
begin
	n6_expected[5] = 1'bX;
end 
// expected n6[ 4 ]
initial
begin
	n6_expected[4] = 1'bX;
end 
// expected n6[ 3 ]
initial
begin
	n6_expected[3] = 1'bX;
end 
// expected n6[ 2 ]
initial
begin
	n6_expected[2] = 1'bX;
end 
// expected n6[ 1 ]
initial
begin
	n6_expected[1] = 1'bX;
end 
// expected n6[ 0 ]
initial
begin
	n6_expected[0] = 1'bX;
end 
// expected n7[ 7 ]
initial
begin
	n7_expected[7] = 1'bX;
end 
// expected n7[ 6 ]
initial
begin
	n7_expected[6] = 1'bX;
end 
// expected n7[ 5 ]
initial
begin
	n7_expected[5] = 1'bX;
end 
// expected n7[ 4 ]
initial
begin
	n7_expected[4] = 1'bX;
end 
// expected n7[ 3 ]
initial
begin
	n7_expected[3] = 1'bX;
end 
// expected n7[ 2 ]
initial
begin
	n7_expected[2] = 1'bX;
end 
// expected n7[ 1 ]
initial
begin
	n7_expected[1] = 1'bX;
end 
// expected n7[ 0 ]
initial
begin
	n7_expected[0] = 1'bX;
end 
// expected n8[ 7 ]
initial
begin
	n8_expected[7] = 1'bX;
end 
// expected n8[ 6 ]
initial
begin
	n8_expected[6] = 1'bX;
end 
// expected n8[ 5 ]
initial
begin
	n8_expected[5] = 1'bX;
end 
// expected n8[ 4 ]
initial
begin
	n8_expected[4] = 1'bX;
end 
// expected n8[ 3 ]
initial
begin
	n8_expected[3] = 1'bX;
end 
// expected n8[ 2 ]
initial
begin
	n8_expected[2] = 1'bX;
end 
// expected n8[ 1 ]
initial
begin
	n8_expected[1] = 1'bX;
end 
// expected n8[ 0 ]
initial
begin
	n8_expected[0] = 1'bX;
end 
// expected n9[ 7 ]
initial
begin
	n9_expected[7] = 1'bX;
end 
// expected n9[ 6 ]
initial
begin
	n9_expected[6] = 1'bX;
end 
// expected n9[ 5 ]
initial
begin
	n9_expected[5] = 1'bX;
end 
// expected n9[ 4 ]
initial
begin
	n9_expected[4] = 1'bX;
end 
// expected n9[ 3 ]
initial
begin
	n9_expected[3] = 1'bX;
end 
// expected n9[ 2 ]
initial
begin
	n9_expected[2] = 1'bX;
end 
// expected n9[ 1 ]
initial
begin
	n9_expected[1] = 1'bX;
end 
// expected n9[ 0 ]
initial
begin
	n9_expected[0] = 1'bX;
end 
// expected n10[ 7 ]
initial
begin
	n10_expected[7] = 1'bX;
end 
// expected n10[ 6 ]
initial
begin
	n10_expected[6] = 1'bX;
end 
// expected n10[ 5 ]
initial
begin
	n10_expected[5] = 1'bX;
end 
// expected n10[ 4 ]
initial
begin
	n10_expected[4] = 1'bX;
end 
// expected n10[ 3 ]
initial
begin
	n10_expected[3] = 1'bX;
end 
// expected n10[ 2 ]
initial
begin
	n10_expected[2] = 1'bX;
end 
// expected n10[ 1 ]
initial
begin
	n10_expected[1] = 1'bX;
end 
// expected n10[ 0 ]
initial
begin
	n10_expected[0] = 1'bX;
end 
// expected n11[ 7 ]
initial
begin
	n11_expected[7] = 1'bX;
end 
// expected n11[ 6 ]
initial
begin
	n11_expected[6] = 1'bX;
end 
// expected n11[ 5 ]
initial
begin
	n11_expected[5] = 1'bX;
end 
// expected n11[ 4 ]
initial
begin
	n11_expected[4] = 1'bX;
end 
// expected n11[ 3 ]
initial
begin
	n11_expected[3] = 1'bX;
end 
// expected n11[ 2 ]
initial
begin
	n11_expected[2] = 1'bX;
end 
// expected n11[ 1 ]
initial
begin
	n11_expected[1] = 1'bX;
end 
// expected n11[ 0 ]
initial
begin
	n11_expected[0] = 1'bX;
end 
// expected n12[ 7 ]
initial
begin
	n12_expected[7] = 1'bX;
end 
// expected n12[ 6 ]
initial
begin
	n12_expected[6] = 1'bX;
end 
// expected n12[ 5 ]
initial
begin
	n12_expected[5] = 1'bX;
end 
// expected n12[ 4 ]
initial
begin
	n12_expected[4] = 1'bX;
end 
// expected n12[ 3 ]
initial
begin
	n12_expected[3] = 1'bX;
end 
// expected n12[ 2 ]
initial
begin
	n12_expected[2] = 1'bX;
end 
// expected n12[ 1 ]
initial
begin
	n12_expected[1] = 1'bX;
end 
// expected n12[ 0 ]
initial
begin
	n12_expected[0] = 1'bX;
end 
// expected n13[ 7 ]
initial
begin
	n13_expected[7] = 1'bX;
end 
// expected n13[ 6 ]
initial
begin
	n13_expected[6] = 1'bX;
end 
// expected n13[ 5 ]
initial
begin
	n13_expected[5] = 1'bX;
end 
// expected n13[ 4 ]
initial
begin
	n13_expected[4] = 1'bX;
end 
// expected n13[ 3 ]
initial
begin
	n13_expected[3] = 1'bX;
end 
// expected n13[ 2 ]
initial
begin
	n13_expected[2] = 1'bX;
end 
// expected n13[ 1 ]
initial
begin
	n13_expected[1] = 1'bX;
end 
// expected n13[ 0 ]
initial
begin
	n13_expected[0] = 1'bX;
end 
// expected n14[ 7 ]
initial
begin
	n14_expected[7] = 1'bX;
end 
// expected n14[ 6 ]
initial
begin
	n14_expected[6] = 1'bX;
end 
// expected n14[ 5 ]
initial
begin
	n14_expected[5] = 1'bX;
end 
// expected n14[ 4 ]
initial
begin
	n14_expected[4] = 1'bX;
end 
// expected n14[ 3 ]
initial
begin
	n14_expected[3] = 1'bX;
end 
// expected n14[ 2 ]
initial
begin
	n14_expected[2] = 1'bX;
end 
// expected n14[ 1 ]
initial
begin
	n14_expected[1] = 1'bX;
end 
// expected n14[ 0 ]
initial
begin
	n14_expected[0] = 1'bX;
end 
// expected n15[ 7 ]
initial
begin
	n15_expected[7] = 1'bX;
end 
// expected n15[ 6 ]
initial
begin
	n15_expected[6] = 1'bX;
end 
// expected n15[ 5 ]
initial
begin
	n15_expected[5] = 1'bX;
end 
// expected n15[ 4 ]
initial
begin
	n15_expected[4] = 1'bX;
end 
// expected n15[ 3 ]
initial
begin
	n15_expected[3] = 1'bX;
end 
// expected n15[ 2 ]
initial
begin
	n15_expected[2] = 1'bX;
end 
// expected n15[ 1 ]
initial
begin
	n15_expected[1] = 1'bX;
end 
// expected n15[ 0 ]
initial
begin
	n15_expected[0] = 1'bX;
end 
// generate trigger
always @(n0_expected or n0 or n1_expected or n1 or n2_expected or n2 or n3_expected or n3 or n4_expected or n4 or n5_expected or n5 or n6_expected or n6 or n7_expected or n7 or n8_expected or n8 or n9_expected or n9 or n10_expected or n10 or n11_expected or n11 or n12_expected or n12 or n13_expected or n13 or n14_expected or n14 or n15_expected or n15)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected n0 = %b | expected n1 = %b | expected n2 = %b | expected n3 = %b | expected n4 = %b | expected n5 = %b | expected n6 = %b | expected n7 = %b | expected n8 = %b | expected n9 = %b | expected n10 = %b | expected n11 = %b | expected n12 = %b | expected n13 = %b | expected n14 = %b | expected n15 = %b | ",n0_expected_prev,n1_expected_prev,n2_expected_prev,n3_expected_prev,n4_expected_prev,n5_expected_prev,n6_expected_prev,n7_expected_prev,n8_expected_prev,n9_expected_prev,n10_expected_prev,n11_expected_prev,n12_expected_prev,n13_expected_prev,n14_expected_prev,n15_expected_prev);
	$display("| real n0 = %b | real n1 = %b | real n2 = %b | real n3 = %b | real n4 = %b | real n5 = %b | real n6 = %b | real n7 = %b | real n8 = %b | real n9 = %b | real n10 = %b | real n11 = %b | real n12 = %b | real n13 = %b | real n14 = %b | real n15 = %b | ",n0_prev,n1_prev,n2_prev,n3_prev,n4_prev,n5_prev,n6_prev,n7_prev,n8_prev,n9_prev,n10_prev,n11_prev,n12_prev,n13_prev,n14_prev,n15_prev);
`endif
	if (
		( n0_expected_prev[0] !== 1'bx ) && ( n0_prev[0] !== n0_expected_prev[0] )
		&& ((n0_expected_prev[0] !== last_n0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n0_expected_prev);
		$display ("     Real value = %b", n0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n0_exp[0] = n0_expected_prev[0];
	end
	if (
		( n0_expected_prev[1] !== 1'bx ) && ( n0_prev[1] !== n0_expected_prev[1] )
		&& ((n0_expected_prev[1] !== last_n0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n0_expected_prev);
		$display ("     Real value = %b", n0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n0_exp[1] = n0_expected_prev[1];
	end
	if (
		( n0_expected_prev[2] !== 1'bx ) && ( n0_prev[2] !== n0_expected_prev[2] )
		&& ((n0_expected_prev[2] !== last_n0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n0_expected_prev);
		$display ("     Real value = %b", n0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n0_exp[2] = n0_expected_prev[2];
	end
	if (
		( n0_expected_prev[3] !== 1'bx ) && ( n0_prev[3] !== n0_expected_prev[3] )
		&& ((n0_expected_prev[3] !== last_n0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n0_expected_prev);
		$display ("     Real value = %b", n0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n0_exp[3] = n0_expected_prev[3];
	end
	if (
		( n0_expected_prev[4] !== 1'bx ) && ( n0_prev[4] !== n0_expected_prev[4] )
		&& ((n0_expected_prev[4] !== last_n0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n0_expected_prev);
		$display ("     Real value = %b", n0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n0_exp[4] = n0_expected_prev[4];
	end
	if (
		( n0_expected_prev[5] !== 1'bx ) && ( n0_prev[5] !== n0_expected_prev[5] )
		&& ((n0_expected_prev[5] !== last_n0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n0_expected_prev);
		$display ("     Real value = %b", n0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n0_exp[5] = n0_expected_prev[5];
	end
	if (
		( n0_expected_prev[6] !== 1'bx ) && ( n0_prev[6] !== n0_expected_prev[6] )
		&& ((n0_expected_prev[6] !== last_n0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n0_expected_prev);
		$display ("     Real value = %b", n0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n0_exp[6] = n0_expected_prev[6];
	end
	if (
		( n0_expected_prev[7] !== 1'bx ) && ( n0_prev[7] !== n0_expected_prev[7] )
		&& ((n0_expected_prev[7] !== last_n0_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n0_expected_prev);
		$display ("     Real value = %b", n0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n0_exp[7] = n0_expected_prev[7];
	end
	if (
		( n1_expected_prev[0] !== 1'bx ) && ( n1_prev[0] !== n1_expected_prev[0] )
		&& ((n1_expected_prev[0] !== last_n1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n1_exp[0] = n1_expected_prev[0];
	end
	if (
		( n1_expected_prev[1] !== 1'bx ) && ( n1_prev[1] !== n1_expected_prev[1] )
		&& ((n1_expected_prev[1] !== last_n1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n1_exp[1] = n1_expected_prev[1];
	end
	if (
		( n1_expected_prev[2] !== 1'bx ) && ( n1_prev[2] !== n1_expected_prev[2] )
		&& ((n1_expected_prev[2] !== last_n1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n1_exp[2] = n1_expected_prev[2];
	end
	if (
		( n1_expected_prev[3] !== 1'bx ) && ( n1_prev[3] !== n1_expected_prev[3] )
		&& ((n1_expected_prev[3] !== last_n1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n1_exp[3] = n1_expected_prev[3];
	end
	if (
		( n1_expected_prev[4] !== 1'bx ) && ( n1_prev[4] !== n1_expected_prev[4] )
		&& ((n1_expected_prev[4] !== last_n1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n1_exp[4] = n1_expected_prev[4];
	end
	if (
		( n1_expected_prev[5] !== 1'bx ) && ( n1_prev[5] !== n1_expected_prev[5] )
		&& ((n1_expected_prev[5] !== last_n1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n1_exp[5] = n1_expected_prev[5];
	end
	if (
		( n1_expected_prev[6] !== 1'bx ) && ( n1_prev[6] !== n1_expected_prev[6] )
		&& ((n1_expected_prev[6] !== last_n1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n1_exp[6] = n1_expected_prev[6];
	end
	if (
		( n1_expected_prev[7] !== 1'bx ) && ( n1_prev[7] !== n1_expected_prev[7] )
		&& ((n1_expected_prev[7] !== last_n1_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n1_expected_prev);
		$display ("     Real value = %b", n1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_n1_exp[7] = n1_expected_prev[7];
	end
	if (
		( n2_expected_prev[0] !== 1'bx ) && ( n2_prev[0] !== n2_expected_prev[0] )
		&& ((n2_expected_prev[0] !== last_n2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n2_exp[0] = n2_expected_prev[0];
	end
	if (
		( n2_expected_prev[1] !== 1'bx ) && ( n2_prev[1] !== n2_expected_prev[1] )
		&& ((n2_expected_prev[1] !== last_n2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n2_exp[1] = n2_expected_prev[1];
	end
	if (
		( n2_expected_prev[2] !== 1'bx ) && ( n2_prev[2] !== n2_expected_prev[2] )
		&& ((n2_expected_prev[2] !== last_n2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n2_exp[2] = n2_expected_prev[2];
	end
	if (
		( n2_expected_prev[3] !== 1'bx ) && ( n2_prev[3] !== n2_expected_prev[3] )
		&& ((n2_expected_prev[3] !== last_n2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n2_exp[3] = n2_expected_prev[3];
	end
	if (
		( n2_expected_prev[4] !== 1'bx ) && ( n2_prev[4] !== n2_expected_prev[4] )
		&& ((n2_expected_prev[4] !== last_n2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n2_exp[4] = n2_expected_prev[4];
	end
	if (
		( n2_expected_prev[5] !== 1'bx ) && ( n2_prev[5] !== n2_expected_prev[5] )
		&& ((n2_expected_prev[5] !== last_n2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n2_exp[5] = n2_expected_prev[5];
	end
	if (
		( n2_expected_prev[6] !== 1'bx ) && ( n2_prev[6] !== n2_expected_prev[6] )
		&& ((n2_expected_prev[6] !== last_n2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n2_exp[6] = n2_expected_prev[6];
	end
	if (
		( n2_expected_prev[7] !== 1'bx ) && ( n2_prev[7] !== n2_expected_prev[7] )
		&& ((n2_expected_prev[7] !== last_n2_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n2_expected_prev);
		$display ("     Real value = %b", n2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_n2_exp[7] = n2_expected_prev[7];
	end
	if (
		( n3_expected_prev[0] !== 1'bx ) && ( n3_prev[0] !== n3_expected_prev[0] )
		&& ((n3_expected_prev[0] !== last_n3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n3_exp[0] = n3_expected_prev[0];
	end
	if (
		( n3_expected_prev[1] !== 1'bx ) && ( n3_prev[1] !== n3_expected_prev[1] )
		&& ((n3_expected_prev[1] !== last_n3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n3_exp[1] = n3_expected_prev[1];
	end
	if (
		( n3_expected_prev[2] !== 1'bx ) && ( n3_prev[2] !== n3_expected_prev[2] )
		&& ((n3_expected_prev[2] !== last_n3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n3_exp[2] = n3_expected_prev[2];
	end
	if (
		( n3_expected_prev[3] !== 1'bx ) && ( n3_prev[3] !== n3_expected_prev[3] )
		&& ((n3_expected_prev[3] !== last_n3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n3_exp[3] = n3_expected_prev[3];
	end
	if (
		( n3_expected_prev[4] !== 1'bx ) && ( n3_prev[4] !== n3_expected_prev[4] )
		&& ((n3_expected_prev[4] !== last_n3_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n3_exp[4] = n3_expected_prev[4];
	end
	if (
		( n3_expected_prev[5] !== 1'bx ) && ( n3_prev[5] !== n3_expected_prev[5] )
		&& ((n3_expected_prev[5] !== last_n3_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n3_exp[5] = n3_expected_prev[5];
	end
	if (
		( n3_expected_prev[6] !== 1'bx ) && ( n3_prev[6] !== n3_expected_prev[6] )
		&& ((n3_expected_prev[6] !== last_n3_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n3_exp[6] = n3_expected_prev[6];
	end
	if (
		( n3_expected_prev[7] !== 1'bx ) && ( n3_prev[7] !== n3_expected_prev[7] )
		&& ((n3_expected_prev[7] !== last_n3_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n3_expected_prev);
		$display ("     Real value = %b", n3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_n3_exp[7] = n3_expected_prev[7];
	end
	if (
		( n4_expected_prev[0] !== 1'bx ) && ( n4_prev[0] !== n4_expected_prev[0] )
		&& ((n4_expected_prev[0] !== last_n4_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_n4_exp[0] = n4_expected_prev[0];
	end
	if (
		( n4_expected_prev[1] !== 1'bx ) && ( n4_prev[1] !== n4_expected_prev[1] )
		&& ((n4_expected_prev[1] !== last_n4_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_n4_exp[1] = n4_expected_prev[1];
	end
	if (
		( n4_expected_prev[2] !== 1'bx ) && ( n4_prev[2] !== n4_expected_prev[2] )
		&& ((n4_expected_prev[2] !== last_n4_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_n4_exp[2] = n4_expected_prev[2];
	end
	if (
		( n4_expected_prev[3] !== 1'bx ) && ( n4_prev[3] !== n4_expected_prev[3] )
		&& ((n4_expected_prev[3] !== last_n4_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_n4_exp[3] = n4_expected_prev[3];
	end
	if (
		( n4_expected_prev[4] !== 1'bx ) && ( n4_prev[4] !== n4_expected_prev[4] )
		&& ((n4_expected_prev[4] !== last_n4_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_n4_exp[4] = n4_expected_prev[4];
	end
	if (
		( n4_expected_prev[5] !== 1'bx ) && ( n4_prev[5] !== n4_expected_prev[5] )
		&& ((n4_expected_prev[5] !== last_n4_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_n4_exp[5] = n4_expected_prev[5];
	end
	if (
		( n4_expected_prev[6] !== 1'bx ) && ( n4_prev[6] !== n4_expected_prev[6] )
		&& ((n4_expected_prev[6] !== last_n4_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_n4_exp[6] = n4_expected_prev[6];
	end
	if (
		( n4_expected_prev[7] !== 1'bx ) && ( n4_prev[7] !== n4_expected_prev[7] )
		&& ((n4_expected_prev[7] !== last_n4_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n4_expected_prev);
		$display ("     Real value = %b", n4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_n4_exp[7] = n4_expected_prev[7];
	end
	if (
		( n5_expected_prev[0] !== 1'bx ) && ( n5_prev[0] !== n5_expected_prev[0] )
		&& ((n5_expected_prev[0] !== last_n5_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n5_expected_prev);
		$display ("     Real value = %b", n5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_n5_exp[0] = n5_expected_prev[0];
	end
	if (
		( n5_expected_prev[1] !== 1'bx ) && ( n5_prev[1] !== n5_expected_prev[1] )
		&& ((n5_expected_prev[1] !== last_n5_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n5_expected_prev);
		$display ("     Real value = %b", n5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_n5_exp[1] = n5_expected_prev[1];
	end
	if (
		( n5_expected_prev[2] !== 1'bx ) && ( n5_prev[2] !== n5_expected_prev[2] )
		&& ((n5_expected_prev[2] !== last_n5_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n5_expected_prev);
		$display ("     Real value = %b", n5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_n5_exp[2] = n5_expected_prev[2];
	end
	if (
		( n5_expected_prev[3] !== 1'bx ) && ( n5_prev[3] !== n5_expected_prev[3] )
		&& ((n5_expected_prev[3] !== last_n5_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n5_expected_prev);
		$display ("     Real value = %b", n5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_n5_exp[3] = n5_expected_prev[3];
	end
	if (
		( n5_expected_prev[4] !== 1'bx ) && ( n5_prev[4] !== n5_expected_prev[4] )
		&& ((n5_expected_prev[4] !== last_n5_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n5_expected_prev);
		$display ("     Real value = %b", n5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_n5_exp[4] = n5_expected_prev[4];
	end
	if (
		( n5_expected_prev[5] !== 1'bx ) && ( n5_prev[5] !== n5_expected_prev[5] )
		&& ((n5_expected_prev[5] !== last_n5_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n5_expected_prev);
		$display ("     Real value = %b", n5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_n5_exp[5] = n5_expected_prev[5];
	end
	if (
		( n5_expected_prev[6] !== 1'bx ) && ( n5_prev[6] !== n5_expected_prev[6] )
		&& ((n5_expected_prev[6] !== last_n5_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n5_expected_prev);
		$display ("     Real value = %b", n5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_n5_exp[6] = n5_expected_prev[6];
	end
	if (
		( n5_expected_prev[7] !== 1'bx ) && ( n5_prev[7] !== n5_expected_prev[7] )
		&& ((n5_expected_prev[7] !== last_n5_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n5[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n5_expected_prev);
		$display ("     Real value = %b", n5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_n5_exp[7] = n5_expected_prev[7];
	end
	if (
		( n6_expected_prev[0] !== 1'bx ) && ( n6_prev[0] !== n6_expected_prev[0] )
		&& ((n6_expected_prev[0] !== last_n6_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n6_expected_prev);
		$display ("     Real value = %b", n6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_n6_exp[0] = n6_expected_prev[0];
	end
	if (
		( n6_expected_prev[1] !== 1'bx ) && ( n6_prev[1] !== n6_expected_prev[1] )
		&& ((n6_expected_prev[1] !== last_n6_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n6_expected_prev);
		$display ("     Real value = %b", n6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_n6_exp[1] = n6_expected_prev[1];
	end
	if (
		( n6_expected_prev[2] !== 1'bx ) && ( n6_prev[2] !== n6_expected_prev[2] )
		&& ((n6_expected_prev[2] !== last_n6_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n6_expected_prev);
		$display ("     Real value = %b", n6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_n6_exp[2] = n6_expected_prev[2];
	end
	if (
		( n6_expected_prev[3] !== 1'bx ) && ( n6_prev[3] !== n6_expected_prev[3] )
		&& ((n6_expected_prev[3] !== last_n6_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n6_expected_prev);
		$display ("     Real value = %b", n6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_n6_exp[3] = n6_expected_prev[3];
	end
	if (
		( n6_expected_prev[4] !== 1'bx ) && ( n6_prev[4] !== n6_expected_prev[4] )
		&& ((n6_expected_prev[4] !== last_n6_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n6[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n6_expected_prev);
		$display ("     Real value = %b", n6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_n6_exp[4] = n6_expected_prev[4];
	end
	if (
		( n6_expected_prev[5] !== 1'bx ) && ( n6_prev[5] !== n6_expected_prev[5] )
		&& ((n6_expected_prev[5] !== last_n6_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n6[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n6_expected_prev);
		$display ("     Real value = %b", n6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_n6_exp[5] = n6_expected_prev[5];
	end
	if (
		( n6_expected_prev[6] !== 1'bx ) && ( n6_prev[6] !== n6_expected_prev[6] )
		&& ((n6_expected_prev[6] !== last_n6_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n6[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n6_expected_prev);
		$display ("     Real value = %b", n6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_n6_exp[6] = n6_expected_prev[6];
	end
	if (
		( n6_expected_prev[7] !== 1'bx ) && ( n6_prev[7] !== n6_expected_prev[7] )
		&& ((n6_expected_prev[7] !== last_n6_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n6[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n6_expected_prev);
		$display ("     Real value = %b", n6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_n6_exp[7] = n6_expected_prev[7];
	end
	if (
		( n7_expected_prev[0] !== 1'bx ) && ( n7_prev[0] !== n7_expected_prev[0] )
		&& ((n7_expected_prev[0] !== last_n7_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n7_expected_prev);
		$display ("     Real value = %b", n7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_n7_exp[0] = n7_expected_prev[0];
	end
	if (
		( n7_expected_prev[1] !== 1'bx ) && ( n7_prev[1] !== n7_expected_prev[1] )
		&& ((n7_expected_prev[1] !== last_n7_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n7_expected_prev);
		$display ("     Real value = %b", n7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_n7_exp[1] = n7_expected_prev[1];
	end
	if (
		( n7_expected_prev[2] !== 1'bx ) && ( n7_prev[2] !== n7_expected_prev[2] )
		&& ((n7_expected_prev[2] !== last_n7_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n7_expected_prev);
		$display ("     Real value = %b", n7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_n7_exp[2] = n7_expected_prev[2];
	end
	if (
		( n7_expected_prev[3] !== 1'bx ) && ( n7_prev[3] !== n7_expected_prev[3] )
		&& ((n7_expected_prev[3] !== last_n7_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n7_expected_prev);
		$display ("     Real value = %b", n7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_n7_exp[3] = n7_expected_prev[3];
	end
	if (
		( n7_expected_prev[4] !== 1'bx ) && ( n7_prev[4] !== n7_expected_prev[4] )
		&& ((n7_expected_prev[4] !== last_n7_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n7[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n7_expected_prev);
		$display ("     Real value = %b", n7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_n7_exp[4] = n7_expected_prev[4];
	end
	if (
		( n7_expected_prev[5] !== 1'bx ) && ( n7_prev[5] !== n7_expected_prev[5] )
		&& ((n7_expected_prev[5] !== last_n7_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n7[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n7_expected_prev);
		$display ("     Real value = %b", n7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_n7_exp[5] = n7_expected_prev[5];
	end
	if (
		( n7_expected_prev[6] !== 1'bx ) && ( n7_prev[6] !== n7_expected_prev[6] )
		&& ((n7_expected_prev[6] !== last_n7_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n7[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n7_expected_prev);
		$display ("     Real value = %b", n7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_n7_exp[6] = n7_expected_prev[6];
	end
	if (
		( n7_expected_prev[7] !== 1'bx ) && ( n7_prev[7] !== n7_expected_prev[7] )
		&& ((n7_expected_prev[7] !== last_n7_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n7[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n7_expected_prev);
		$display ("     Real value = %b", n7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_n7_exp[7] = n7_expected_prev[7];
	end
	if (
		( n8_expected_prev[0] !== 1'bx ) && ( n8_prev[0] !== n8_expected_prev[0] )
		&& ((n8_expected_prev[0] !== last_n8_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n8[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n8_expected_prev);
		$display ("     Real value = %b", n8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_n8_exp[0] = n8_expected_prev[0];
	end
	if (
		( n8_expected_prev[1] !== 1'bx ) && ( n8_prev[1] !== n8_expected_prev[1] )
		&& ((n8_expected_prev[1] !== last_n8_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n8[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n8_expected_prev);
		$display ("     Real value = %b", n8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_n8_exp[1] = n8_expected_prev[1];
	end
	if (
		( n8_expected_prev[2] !== 1'bx ) && ( n8_prev[2] !== n8_expected_prev[2] )
		&& ((n8_expected_prev[2] !== last_n8_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n8[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n8_expected_prev);
		$display ("     Real value = %b", n8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_n8_exp[2] = n8_expected_prev[2];
	end
	if (
		( n8_expected_prev[3] !== 1'bx ) && ( n8_prev[3] !== n8_expected_prev[3] )
		&& ((n8_expected_prev[3] !== last_n8_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n8[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n8_expected_prev);
		$display ("     Real value = %b", n8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_n8_exp[3] = n8_expected_prev[3];
	end
	if (
		( n8_expected_prev[4] !== 1'bx ) && ( n8_prev[4] !== n8_expected_prev[4] )
		&& ((n8_expected_prev[4] !== last_n8_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n8[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n8_expected_prev);
		$display ("     Real value = %b", n8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_n8_exp[4] = n8_expected_prev[4];
	end
	if (
		( n8_expected_prev[5] !== 1'bx ) && ( n8_prev[5] !== n8_expected_prev[5] )
		&& ((n8_expected_prev[5] !== last_n8_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n8[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n8_expected_prev);
		$display ("     Real value = %b", n8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_n8_exp[5] = n8_expected_prev[5];
	end
	if (
		( n8_expected_prev[6] !== 1'bx ) && ( n8_prev[6] !== n8_expected_prev[6] )
		&& ((n8_expected_prev[6] !== last_n8_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n8[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n8_expected_prev);
		$display ("     Real value = %b", n8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_n8_exp[6] = n8_expected_prev[6];
	end
	if (
		( n8_expected_prev[7] !== 1'bx ) && ( n8_prev[7] !== n8_expected_prev[7] )
		&& ((n8_expected_prev[7] !== last_n8_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n8[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n8_expected_prev);
		$display ("     Real value = %b", n8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_n8_exp[7] = n8_expected_prev[7];
	end
	if (
		( n9_expected_prev[0] !== 1'bx ) && ( n9_prev[0] !== n9_expected_prev[0] )
		&& ((n9_expected_prev[0] !== last_n9_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n9[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n9_expected_prev);
		$display ("     Real value = %b", n9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_n9_exp[0] = n9_expected_prev[0];
	end
	if (
		( n9_expected_prev[1] !== 1'bx ) && ( n9_prev[1] !== n9_expected_prev[1] )
		&& ((n9_expected_prev[1] !== last_n9_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n9[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n9_expected_prev);
		$display ("     Real value = %b", n9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_n9_exp[1] = n9_expected_prev[1];
	end
	if (
		( n9_expected_prev[2] !== 1'bx ) && ( n9_prev[2] !== n9_expected_prev[2] )
		&& ((n9_expected_prev[2] !== last_n9_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n9[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n9_expected_prev);
		$display ("     Real value = %b", n9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_n9_exp[2] = n9_expected_prev[2];
	end
	if (
		( n9_expected_prev[3] !== 1'bx ) && ( n9_prev[3] !== n9_expected_prev[3] )
		&& ((n9_expected_prev[3] !== last_n9_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n9[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n9_expected_prev);
		$display ("     Real value = %b", n9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_n9_exp[3] = n9_expected_prev[3];
	end
	if (
		( n9_expected_prev[4] !== 1'bx ) && ( n9_prev[4] !== n9_expected_prev[4] )
		&& ((n9_expected_prev[4] !== last_n9_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n9[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n9_expected_prev);
		$display ("     Real value = %b", n9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_n9_exp[4] = n9_expected_prev[4];
	end
	if (
		( n9_expected_prev[5] !== 1'bx ) && ( n9_prev[5] !== n9_expected_prev[5] )
		&& ((n9_expected_prev[5] !== last_n9_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n9[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n9_expected_prev);
		$display ("     Real value = %b", n9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_n9_exp[5] = n9_expected_prev[5];
	end
	if (
		( n9_expected_prev[6] !== 1'bx ) && ( n9_prev[6] !== n9_expected_prev[6] )
		&& ((n9_expected_prev[6] !== last_n9_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n9[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n9_expected_prev);
		$display ("     Real value = %b", n9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_n9_exp[6] = n9_expected_prev[6];
	end
	if (
		( n9_expected_prev[7] !== 1'bx ) && ( n9_prev[7] !== n9_expected_prev[7] )
		&& ((n9_expected_prev[7] !== last_n9_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n9[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n9_expected_prev);
		$display ("     Real value = %b", n9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_n9_exp[7] = n9_expected_prev[7];
	end
	if (
		( n10_expected_prev[0] !== 1'bx ) && ( n10_prev[0] !== n10_expected_prev[0] )
		&& ((n10_expected_prev[0] !== last_n10_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n10[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n10_expected_prev);
		$display ("     Real value = %b", n10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_n10_exp[0] = n10_expected_prev[0];
	end
	if (
		( n10_expected_prev[1] !== 1'bx ) && ( n10_prev[1] !== n10_expected_prev[1] )
		&& ((n10_expected_prev[1] !== last_n10_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n10[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n10_expected_prev);
		$display ("     Real value = %b", n10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_n10_exp[1] = n10_expected_prev[1];
	end
	if (
		( n10_expected_prev[2] !== 1'bx ) && ( n10_prev[2] !== n10_expected_prev[2] )
		&& ((n10_expected_prev[2] !== last_n10_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n10[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n10_expected_prev);
		$display ("     Real value = %b", n10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_n10_exp[2] = n10_expected_prev[2];
	end
	if (
		( n10_expected_prev[3] !== 1'bx ) && ( n10_prev[3] !== n10_expected_prev[3] )
		&& ((n10_expected_prev[3] !== last_n10_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n10[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n10_expected_prev);
		$display ("     Real value = %b", n10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_n10_exp[3] = n10_expected_prev[3];
	end
	if (
		( n10_expected_prev[4] !== 1'bx ) && ( n10_prev[4] !== n10_expected_prev[4] )
		&& ((n10_expected_prev[4] !== last_n10_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n10[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n10_expected_prev);
		$display ("     Real value = %b", n10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_n10_exp[4] = n10_expected_prev[4];
	end
	if (
		( n10_expected_prev[5] !== 1'bx ) && ( n10_prev[5] !== n10_expected_prev[5] )
		&& ((n10_expected_prev[5] !== last_n10_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n10[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n10_expected_prev);
		$display ("     Real value = %b", n10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_n10_exp[5] = n10_expected_prev[5];
	end
	if (
		( n10_expected_prev[6] !== 1'bx ) && ( n10_prev[6] !== n10_expected_prev[6] )
		&& ((n10_expected_prev[6] !== last_n10_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n10[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n10_expected_prev);
		$display ("     Real value = %b", n10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_n10_exp[6] = n10_expected_prev[6];
	end
	if (
		( n10_expected_prev[7] !== 1'bx ) && ( n10_prev[7] !== n10_expected_prev[7] )
		&& ((n10_expected_prev[7] !== last_n10_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n10[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n10_expected_prev);
		$display ("     Real value = %b", n10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_n10_exp[7] = n10_expected_prev[7];
	end
	if (
		( n11_expected_prev[0] !== 1'bx ) && ( n11_prev[0] !== n11_expected_prev[0] )
		&& ((n11_expected_prev[0] !== last_n11_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n11[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n11_expected_prev);
		$display ("     Real value = %b", n11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_n11_exp[0] = n11_expected_prev[0];
	end
	if (
		( n11_expected_prev[1] !== 1'bx ) && ( n11_prev[1] !== n11_expected_prev[1] )
		&& ((n11_expected_prev[1] !== last_n11_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n11[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n11_expected_prev);
		$display ("     Real value = %b", n11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_n11_exp[1] = n11_expected_prev[1];
	end
	if (
		( n11_expected_prev[2] !== 1'bx ) && ( n11_prev[2] !== n11_expected_prev[2] )
		&& ((n11_expected_prev[2] !== last_n11_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n11[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n11_expected_prev);
		$display ("     Real value = %b", n11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_n11_exp[2] = n11_expected_prev[2];
	end
	if (
		( n11_expected_prev[3] !== 1'bx ) && ( n11_prev[3] !== n11_expected_prev[3] )
		&& ((n11_expected_prev[3] !== last_n11_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n11[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n11_expected_prev);
		$display ("     Real value = %b", n11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_n11_exp[3] = n11_expected_prev[3];
	end
	if (
		( n11_expected_prev[4] !== 1'bx ) && ( n11_prev[4] !== n11_expected_prev[4] )
		&& ((n11_expected_prev[4] !== last_n11_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n11[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n11_expected_prev);
		$display ("     Real value = %b", n11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_n11_exp[4] = n11_expected_prev[4];
	end
	if (
		( n11_expected_prev[5] !== 1'bx ) && ( n11_prev[5] !== n11_expected_prev[5] )
		&& ((n11_expected_prev[5] !== last_n11_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n11[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n11_expected_prev);
		$display ("     Real value = %b", n11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_n11_exp[5] = n11_expected_prev[5];
	end
	if (
		( n11_expected_prev[6] !== 1'bx ) && ( n11_prev[6] !== n11_expected_prev[6] )
		&& ((n11_expected_prev[6] !== last_n11_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n11[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n11_expected_prev);
		$display ("     Real value = %b", n11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_n11_exp[6] = n11_expected_prev[6];
	end
	if (
		( n11_expected_prev[7] !== 1'bx ) && ( n11_prev[7] !== n11_expected_prev[7] )
		&& ((n11_expected_prev[7] !== last_n11_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n11[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n11_expected_prev);
		$display ("     Real value = %b", n11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_n11_exp[7] = n11_expected_prev[7];
	end
	if (
		( n12_expected_prev[0] !== 1'bx ) && ( n12_prev[0] !== n12_expected_prev[0] )
		&& ((n12_expected_prev[0] !== last_n12_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n12[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n12_expected_prev);
		$display ("     Real value = %b", n12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_n12_exp[0] = n12_expected_prev[0];
	end
	if (
		( n12_expected_prev[1] !== 1'bx ) && ( n12_prev[1] !== n12_expected_prev[1] )
		&& ((n12_expected_prev[1] !== last_n12_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n12[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n12_expected_prev);
		$display ("     Real value = %b", n12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_n12_exp[1] = n12_expected_prev[1];
	end
	if (
		( n12_expected_prev[2] !== 1'bx ) && ( n12_prev[2] !== n12_expected_prev[2] )
		&& ((n12_expected_prev[2] !== last_n12_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n12[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n12_expected_prev);
		$display ("     Real value = %b", n12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_n12_exp[2] = n12_expected_prev[2];
	end
	if (
		( n12_expected_prev[3] !== 1'bx ) && ( n12_prev[3] !== n12_expected_prev[3] )
		&& ((n12_expected_prev[3] !== last_n12_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n12[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n12_expected_prev);
		$display ("     Real value = %b", n12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_n12_exp[3] = n12_expected_prev[3];
	end
	if (
		( n12_expected_prev[4] !== 1'bx ) && ( n12_prev[4] !== n12_expected_prev[4] )
		&& ((n12_expected_prev[4] !== last_n12_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n12[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n12_expected_prev);
		$display ("     Real value = %b", n12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_n12_exp[4] = n12_expected_prev[4];
	end
	if (
		( n12_expected_prev[5] !== 1'bx ) && ( n12_prev[5] !== n12_expected_prev[5] )
		&& ((n12_expected_prev[5] !== last_n12_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n12[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n12_expected_prev);
		$display ("     Real value = %b", n12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_n12_exp[5] = n12_expected_prev[5];
	end
	if (
		( n12_expected_prev[6] !== 1'bx ) && ( n12_prev[6] !== n12_expected_prev[6] )
		&& ((n12_expected_prev[6] !== last_n12_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n12[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n12_expected_prev);
		$display ("     Real value = %b", n12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_n12_exp[6] = n12_expected_prev[6];
	end
	if (
		( n12_expected_prev[7] !== 1'bx ) && ( n12_prev[7] !== n12_expected_prev[7] )
		&& ((n12_expected_prev[7] !== last_n12_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n12[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n12_expected_prev);
		$display ("     Real value = %b", n12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_n12_exp[7] = n12_expected_prev[7];
	end
	if (
		( n13_expected_prev[0] !== 1'bx ) && ( n13_prev[0] !== n13_expected_prev[0] )
		&& ((n13_expected_prev[0] !== last_n13_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n13[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n13_expected_prev);
		$display ("     Real value = %b", n13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_n13_exp[0] = n13_expected_prev[0];
	end
	if (
		( n13_expected_prev[1] !== 1'bx ) && ( n13_prev[1] !== n13_expected_prev[1] )
		&& ((n13_expected_prev[1] !== last_n13_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n13[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n13_expected_prev);
		$display ("     Real value = %b", n13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_n13_exp[1] = n13_expected_prev[1];
	end
	if (
		( n13_expected_prev[2] !== 1'bx ) && ( n13_prev[2] !== n13_expected_prev[2] )
		&& ((n13_expected_prev[2] !== last_n13_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n13[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n13_expected_prev);
		$display ("     Real value = %b", n13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_n13_exp[2] = n13_expected_prev[2];
	end
	if (
		( n13_expected_prev[3] !== 1'bx ) && ( n13_prev[3] !== n13_expected_prev[3] )
		&& ((n13_expected_prev[3] !== last_n13_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n13[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n13_expected_prev);
		$display ("     Real value = %b", n13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_n13_exp[3] = n13_expected_prev[3];
	end
	if (
		( n13_expected_prev[4] !== 1'bx ) && ( n13_prev[4] !== n13_expected_prev[4] )
		&& ((n13_expected_prev[4] !== last_n13_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n13[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n13_expected_prev);
		$display ("     Real value = %b", n13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_n13_exp[4] = n13_expected_prev[4];
	end
	if (
		( n13_expected_prev[5] !== 1'bx ) && ( n13_prev[5] !== n13_expected_prev[5] )
		&& ((n13_expected_prev[5] !== last_n13_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n13[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n13_expected_prev);
		$display ("     Real value = %b", n13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_n13_exp[5] = n13_expected_prev[5];
	end
	if (
		( n13_expected_prev[6] !== 1'bx ) && ( n13_prev[6] !== n13_expected_prev[6] )
		&& ((n13_expected_prev[6] !== last_n13_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n13[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n13_expected_prev);
		$display ("     Real value = %b", n13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_n13_exp[6] = n13_expected_prev[6];
	end
	if (
		( n13_expected_prev[7] !== 1'bx ) && ( n13_prev[7] !== n13_expected_prev[7] )
		&& ((n13_expected_prev[7] !== last_n13_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n13[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n13_expected_prev);
		$display ("     Real value = %b", n13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_n13_exp[7] = n13_expected_prev[7];
	end
	if (
		( n14_expected_prev[0] !== 1'bx ) && ( n14_prev[0] !== n14_expected_prev[0] )
		&& ((n14_expected_prev[0] !== last_n14_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n14[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n14_expected_prev);
		$display ("     Real value = %b", n14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_n14_exp[0] = n14_expected_prev[0];
	end
	if (
		( n14_expected_prev[1] !== 1'bx ) && ( n14_prev[1] !== n14_expected_prev[1] )
		&& ((n14_expected_prev[1] !== last_n14_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n14[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n14_expected_prev);
		$display ("     Real value = %b", n14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_n14_exp[1] = n14_expected_prev[1];
	end
	if (
		( n14_expected_prev[2] !== 1'bx ) && ( n14_prev[2] !== n14_expected_prev[2] )
		&& ((n14_expected_prev[2] !== last_n14_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n14[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n14_expected_prev);
		$display ("     Real value = %b", n14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_n14_exp[2] = n14_expected_prev[2];
	end
	if (
		( n14_expected_prev[3] !== 1'bx ) && ( n14_prev[3] !== n14_expected_prev[3] )
		&& ((n14_expected_prev[3] !== last_n14_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n14[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n14_expected_prev);
		$display ("     Real value = %b", n14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_n14_exp[3] = n14_expected_prev[3];
	end
	if (
		( n14_expected_prev[4] !== 1'bx ) && ( n14_prev[4] !== n14_expected_prev[4] )
		&& ((n14_expected_prev[4] !== last_n14_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n14[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n14_expected_prev);
		$display ("     Real value = %b", n14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_n14_exp[4] = n14_expected_prev[4];
	end
	if (
		( n14_expected_prev[5] !== 1'bx ) && ( n14_prev[5] !== n14_expected_prev[5] )
		&& ((n14_expected_prev[5] !== last_n14_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n14[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n14_expected_prev);
		$display ("     Real value = %b", n14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_n14_exp[5] = n14_expected_prev[5];
	end
	if (
		( n14_expected_prev[6] !== 1'bx ) && ( n14_prev[6] !== n14_expected_prev[6] )
		&& ((n14_expected_prev[6] !== last_n14_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n14[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n14_expected_prev);
		$display ("     Real value = %b", n14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_n14_exp[6] = n14_expected_prev[6];
	end
	if (
		( n14_expected_prev[7] !== 1'bx ) && ( n14_prev[7] !== n14_expected_prev[7] )
		&& ((n14_expected_prev[7] !== last_n14_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n14[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n14_expected_prev);
		$display ("     Real value = %b", n14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_n14_exp[7] = n14_expected_prev[7];
	end
	if (
		( n15_expected_prev[0] !== 1'bx ) && ( n15_prev[0] !== n15_expected_prev[0] )
		&& ((n15_expected_prev[0] !== last_n15_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n15[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n15_expected_prev);
		$display ("     Real value = %b", n15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_n15_exp[0] = n15_expected_prev[0];
	end
	if (
		( n15_expected_prev[1] !== 1'bx ) && ( n15_prev[1] !== n15_expected_prev[1] )
		&& ((n15_expected_prev[1] !== last_n15_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n15[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n15_expected_prev);
		$display ("     Real value = %b", n15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_n15_exp[1] = n15_expected_prev[1];
	end
	if (
		( n15_expected_prev[2] !== 1'bx ) && ( n15_prev[2] !== n15_expected_prev[2] )
		&& ((n15_expected_prev[2] !== last_n15_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n15[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n15_expected_prev);
		$display ("     Real value = %b", n15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_n15_exp[2] = n15_expected_prev[2];
	end
	if (
		( n15_expected_prev[3] !== 1'bx ) && ( n15_prev[3] !== n15_expected_prev[3] )
		&& ((n15_expected_prev[3] !== last_n15_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n15[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n15_expected_prev);
		$display ("     Real value = %b", n15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_n15_exp[3] = n15_expected_prev[3];
	end
	if (
		( n15_expected_prev[4] !== 1'bx ) && ( n15_prev[4] !== n15_expected_prev[4] )
		&& ((n15_expected_prev[4] !== last_n15_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n15[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n15_expected_prev);
		$display ("     Real value = %b", n15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_n15_exp[4] = n15_expected_prev[4];
	end
	if (
		( n15_expected_prev[5] !== 1'bx ) && ( n15_prev[5] !== n15_expected_prev[5] )
		&& ((n15_expected_prev[5] !== last_n15_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n15[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n15_expected_prev);
		$display ("     Real value = %b", n15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_n15_exp[5] = n15_expected_prev[5];
	end
	if (
		( n15_expected_prev[6] !== 1'bx ) && ( n15_prev[6] !== n15_expected_prev[6] )
		&& ((n15_expected_prev[6] !== last_n15_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n15[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n15_expected_prev);
		$display ("     Real value = %b", n15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_n15_exp[6] = n15_expected_prev[6];
	end
	if (
		( n15_expected_prev[7] !== 1'bx ) && ( n15_prev[7] !== n15_expected_prev[7] )
		&& ((n15_expected_prev[7] !== last_n15_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n15[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n15_expected_prev);
		$display ("     Real value = %b", n15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_n15_exp[7] = n15_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module SubChave_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] c0;
reg [7:0] c1;
reg [7:0] c2;
reg [7:0] c3;
reg [7:0] c4;
reg [7:0] c5;
reg [7:0] c6;
reg [7:0] c7;
reg [7:0] c8;
reg [7:0] c9;
reg [7:0] c10;
reg [7:0] c11;
reg [7:0] c12;
reg [7:0] c13;
reg [7:0] c14;
reg [7:0] c15;
reg [3:0] seletor;
// wires                                               
wire [7:0] n0;
wire [7:0] n1;
wire [7:0] n2;
wire [7:0] n3;
wire [7:0] n4;
wire [7:0] n5;
wire [7:0] n6;
wire [7:0] n7;
wire [7:0] n8;
wire [7:0] n9;
wire [7:0] n10;
wire [7:0] n11;
wire [7:0] n12;
wire [7:0] n13;
wire [7:0] n14;
wire [7:0] n15;

wire sampler;                             

// assign statements (if any)                          
SubChave i1 (
// port map - connection between master ports and signals/registers   
	.c0(c0),
	.c1(c1),
	.c2(c2),
	.c3(c3),
	.c4(c4),
	.c5(c5),
	.c6(c6),
	.c7(c7),
	.c8(c8),
	.c9(c9),
	.c10(c10),
	.c11(c11),
	.c12(c12),
	.c13(c13),
	.c14(c14),
	.c15(c15),
	.n0(n0),
	.n1(n1),
	.n2(n2),
	.n3(n3),
	.n4(n4),
	.n5(n5),
	.n6(n6),
	.n7(n7),
	.n8(n8),
	.n9(n9),
	.n10(n10),
	.n11(n11),
	.n12(n12),
	.n13(n13),
	.n14(n14),
	.n15(n15),
	.seletor(seletor)
);
// c0[ 7 ]
initial
begin
	c0[7] = 1'b0;
end 
// c0[ 6 ]
initial
begin
	c0[6] = 1'b0;
end 
// c0[ 5 ]
initial
begin
	c0[5] = 1'b1;
end 
// c0[ 4 ]
initial
begin
	c0[4] = 1'b0;
end 
// c0[ 3 ]
initial
begin
	c0[3] = 1'b1;
end 
// c0[ 2 ]
initial
begin
	c0[2] = 1'b0;
end 
// c0[ 1 ]
initial
begin
	c0[1] = 1'b1;
end 
// c0[ 0 ]
initial
begin
	c0[0] = 1'b1;
end 
// c1[ 7 ]
initial
begin
	c1[7] = 1'b0;
end 
// c1[ 6 ]
initial
begin
	c1[6] = 1'b1;
end 
// c1[ 5 ]
initial
begin
	c1[5] = 1'b1;
end 
// c1[ 4 ]
initial
begin
	c1[4] = 1'b1;
end 
// c1[ 3 ]
initial
begin
	c1[3] = 1'b1;
end 
// c1[ 2 ]
initial
begin
	c1[2] = 1'b1;
end 
// c1[ 1 ]
initial
begin
	c1[1] = 1'b1;
end 
// c1[ 0 ]
initial
begin
	c1[0] = 1'b0;
end 
// c2[ 7 ]
initial
begin
	c2[7] = 1'b0;
end 
// c2[ 6 ]
initial
begin
	c2[6] = 1'b0;
end 
// c2[ 5 ]
initial
begin
	c2[5] = 1'b0;
end 
// c2[ 4 ]
initial
begin
	c2[4] = 1'b1;
end 
// c2[ 3 ]
initial
begin
	c2[3] = 1'b0;
end 
// c2[ 2 ]
initial
begin
	c2[2] = 1'b1;
end 
// c2[ 1 ]
initial
begin
	c2[1] = 1'b0;
end 
// c2[ 0 ]
initial
begin
	c2[0] = 1'b1;
end 
// c3[ 7 ]
initial
begin
	c3[7] = 1'b0;
end 
// c3[ 6 ]
initial
begin
	c3[6] = 1'b0;
end 
// c3[ 5 ]
initial
begin
	c3[5] = 1'b0;
end 
// c3[ 4 ]
initial
begin
	c3[4] = 1'b1;
end 
// c3[ 3 ]
initial
begin
	c3[3] = 1'b0;
end 
// c3[ 2 ]
initial
begin
	c3[2] = 1'b1;
end 
// c3[ 1 ]
initial
begin
	c3[1] = 1'b1;
end 
// c3[ 0 ]
initial
begin
	c3[0] = 1'b0;
end 
// c4[ 7 ]
initial
begin
	c4[7] = 1'b0;
end 
// c4[ 6 ]
initial
begin
	c4[6] = 1'b0;
end 
// c4[ 5 ]
initial
begin
	c4[5] = 1'b1;
end 
// c4[ 4 ]
initial
begin
	c4[4] = 1'b0;
end 
// c4[ 3 ]
initial
begin
	c4[3] = 1'b1;
end 
// c4[ 2 ]
initial
begin
	c4[2] = 1'b0;
end 
// c4[ 1 ]
initial
begin
	c4[1] = 1'b0;
end 
// c4[ 0 ]
initial
begin
	c4[0] = 1'b0;
end 
// c5[ 7 ]
initial
begin
	c5[7] = 1'b1;
end 
// c5[ 6 ]
initial
begin
	c5[6] = 1'b0;
end 
// c5[ 5 ]
initial
begin
	c5[5] = 1'b1;
end 
// c5[ 4 ]
initial
begin
	c5[4] = 1'b0;
end 
// c5[ 3 ]
initial
begin
	c5[3] = 1'b1;
end 
// c5[ 2 ]
initial
begin
	c5[2] = 1'b1;
end 
// c5[ 1 ]
initial
begin
	c5[1] = 1'b1;
end 
// c5[ 0 ]
initial
begin
	c5[0] = 1'b0;
end 
// c6[ 7 ]
initial
begin
	c6[7] = 1'b1;
end 
// c6[ 6 ]
initial
begin
	c6[6] = 1'b1;
end 
// c6[ 5 ]
initial
begin
	c6[5] = 1'b0;
end 
// c6[ 4 ]
initial
begin
	c6[4] = 1'b1;
end 
// c6[ 3 ]
initial
begin
	c6[3] = 1'b0;
end 
// c6[ 2 ]
initial
begin
	c6[2] = 1'b0;
end 
// c6[ 1 ]
initial
begin
	c6[1] = 1'b1;
end 
// c6[ 0 ]
initial
begin
	c6[0] = 1'b0;
end 
// c7[ 7 ]
initial
begin
	c7[7] = 1'b1;
end 
// c7[ 6 ]
initial
begin
	c7[6] = 1'b0;
end 
// c7[ 5 ]
initial
begin
	c7[5] = 1'b1;
end 
// c7[ 4 ]
initial
begin
	c7[4] = 1'b0;
end 
// c7[ 3 ]
initial
begin
	c7[3] = 1'b0;
end 
// c7[ 2 ]
initial
begin
	c7[2] = 1'b1;
end 
// c7[ 1 ]
initial
begin
	c7[1] = 1'b1;
end 
// c7[ 0 ]
initial
begin
	c7[0] = 1'b0;
end 
// c8[ 7 ]
initial
begin
	c8[7] = 1'b1;
end 
// c8[ 6 ]
initial
begin
	c8[6] = 1'b0;
end 
// c8[ 5 ]
initial
begin
	c8[5] = 1'b1;
end 
// c8[ 4 ]
initial
begin
	c8[4] = 1'b0;
end 
// c8[ 3 ]
initial
begin
	c8[3] = 1'b1;
end 
// c8[ 2 ]
initial
begin
	c8[2] = 1'b0;
end 
// c8[ 1 ]
initial
begin
	c8[1] = 1'b1;
end 
// c8[ 0 ]
initial
begin
	c8[0] = 1'b1;
end 
// c9[ 7 ]
initial
begin
	c9[7] = 1'b1;
end 
// c9[ 6 ]
initial
begin
	c9[6] = 1'b1;
end 
// c9[ 5 ]
initial
begin
	c9[5] = 1'b1;
end 
// c9[ 4 ]
initial
begin
	c9[4] = 1'b1;
end 
// c9[ 3 ]
initial
begin
	c9[3] = 1'b0;
end 
// c9[ 2 ]
initial
begin
	c9[2] = 1'b1;
end 
// c9[ 1 ]
initial
begin
	c9[1] = 1'b1;
end 
// c9[ 0 ]
initial
begin
	c9[0] = 1'b1;
end 
// c10[ 7 ]
initial
begin
	c10[7] = 1'b0;
end 
// c10[ 6 ]
initial
begin
	c10[6] = 1'b0;
end 
// c10[ 5 ]
initial
begin
	c10[5] = 1'b0;
end 
// c10[ 4 ]
initial
begin
	c10[4] = 1'b1;
end 
// c10[ 3 ]
initial
begin
	c10[3] = 1'b0;
end 
// c10[ 2 ]
initial
begin
	c10[2] = 1'b1;
end 
// c10[ 1 ]
initial
begin
	c10[1] = 1'b0;
end 
// c10[ 0 ]
initial
begin
	c10[0] = 1'b1;
end 
// c11[ 7 ]
initial
begin
	c11[7] = 1'b1;
end 
// c11[ 6 ]
initial
begin
	c11[6] = 1'b0;
end 
// c11[ 5 ]
initial
begin
	c11[5] = 1'b0;
end 
// c11[ 4 ]
initial
begin
	c11[4] = 1'b0;
end 
// c11[ 3 ]
initial
begin
	c11[3] = 1'b1;
end 
// c11[ 2 ]
initial
begin
	c11[2] = 1'b0;
end 
// c11[ 1 ]
initial
begin
	c11[1] = 1'b0;
end 
// c11[ 0 ]
initial
begin
	c11[0] = 1'b0;
end 
// c12[ 7 ]
initial
begin
	c12[7] = 1'b0;
end 
// c12[ 6 ]
initial
begin
	c12[6] = 1'b0;
end 
// c12[ 5 ]
initial
begin
	c12[5] = 1'b0;
end 
// c12[ 4 ]
initial
begin
	c12[4] = 1'b0;
end 
// c12[ 3 ]
initial
begin
	c12[3] = 1'b1;
end 
// c12[ 2 ]
initial
begin
	c12[2] = 1'b0;
end 
// c12[ 1 ]
initial
begin
	c12[1] = 1'b0;
end 
// c12[ 0 ]
initial
begin
	c12[0] = 1'b1;
end 
// c13[ 7 ]
initial
begin
	c13[7] = 1'b1;
end 
// c13[ 6 ]
initial
begin
	c13[6] = 1'b1;
end 
// c13[ 5 ]
initial
begin
	c13[5] = 1'b0;
end 
// c13[ 4 ]
initial
begin
	c13[4] = 1'b0;
end 
// c13[ 3 ]
initial
begin
	c13[3] = 1'b1;
end 
// c13[ 2 ]
initial
begin
	c13[2] = 1'b1;
end 
// c13[ 1 ]
initial
begin
	c13[1] = 1'b1;
end 
// c13[ 0 ]
initial
begin
	c13[0] = 1'b1;
end 
// c14[ 7 ]
initial
begin
	c14[7] = 1'b0;
end 
// c14[ 6 ]
initial
begin
	c14[6] = 1'b1;
end 
// c14[ 5 ]
initial
begin
	c14[5] = 1'b0;
end 
// c14[ 4 ]
initial
begin
	c14[4] = 1'b0;
end 
// c14[ 3 ]
initial
begin
	c14[3] = 1'b1;
end 
// c14[ 2 ]
initial
begin
	c14[2] = 1'b1;
end 
// c14[ 1 ]
initial
begin
	c14[1] = 1'b1;
end 
// c14[ 0 ]
initial
begin
	c14[0] = 1'b1;
end 
// c15[ 7 ]
initial
begin
	c15[7] = 1'b0;
end 
// c15[ 6 ]
initial
begin
	c15[6] = 1'b0;
end 
// c15[ 5 ]
initial
begin
	c15[5] = 1'b1;
end 
// c15[ 4 ]
initial
begin
	c15[4] = 1'b1;
end 
// c15[ 3 ]
initial
begin
	c15[3] = 1'b1;
end 
// c15[ 2 ]
initial
begin
	c15[2] = 1'b1;
end 
// c15[ 1 ]
initial
begin
	c15[1] = 1'b0;
end 
// c15[ 0 ]
initial
begin
	c15[0] = 1'b0;
end 
// seletor[ 3 ]
initial
begin
	seletor[3] = 1'b0;
end 
// seletor[ 2 ]
initial
begin
	seletor[2] = 1'b0;
end 
// seletor[ 1 ]
initial
begin
	seletor[1] = 1'b0;
end 
// seletor[ 0 ]
initial
begin
	seletor[0] = 1'b1;
end 

SubChave_vlg_sample_tst tb_sample (
	.c0(c0),
	.c1(c1),
	.c2(c2),
	.c3(c3),
	.c4(c4),
	.c5(c5),
	.c6(c6),
	.c7(c7),
	.c8(c8),
	.c9(c9),
	.c10(c10),
	.c11(c11),
	.c12(c12),
	.c13(c13),
	.c14(c14),
	.c15(c15),
	.seletor(seletor),
	.sampler_tx(sampler)
);

SubChave_vlg_check_tst tb_out(
	.n0(n0),
	.n1(n1),
	.n2(n2),
	.n3(n3),
	.n4(n4),
	.n5(n5),
	.n6(n6),
	.n7(n7),
	.n8(n8),
	.n9(n9),
	.n10(n10),
	.n11(n11),
	.n12(n12),
	.n13(n13),
	.n14(n14),
	.n15(n15),
	.sampler_rx(sampler)
);
endmodule

